var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.062,1,2.19]],["body/controllers/AppController.html",[0,2.068,1,3.699,2,1.173,3,0.308,4,0.268,5,0.268,6,3.315,7,0.877,8,5.068,9,3.739,10,0.065,11,3.031,12,4.267,13,4.267,14,4.267,15,5.068,16,5.068,17,5.068,18,3.031,19,2.174,20,4.267,21,5.068,22,3.739,23,4.267,24,0.397,25,0.028,26,0.877,27,3.425,28,3.315,29,0.308,30,1.824,31,2.905,32,3.315,33,2.599,34,2.905,35,3.315,36,3.345,37,3.345,38,1.976,39,3.937,40,3.937,41,2.599,42,1.688,43,0.021,44,0.021]],["title/modules/AppModule.html",[45,1.062,46,2.19]],["body/modules/AppModule.html",[1,3.168,2,1.23,3,0.228,4,0.198,5,0.198,10,0.034,22,2.145,24,0.513,25,0.028,26,0.648,27,3.131,28,2.448,29,0.228,43,0.017,44,0.017,45,1.536,46,4.305,47,1.77,48,1.347,49,1.589,50,1.589,51,1.347,52,2.409,53,1.46,54,2.448,55,2.448,56,2.448,57,3.131,58,3.427,59,3.427,60,3.427,61,2.877,62,2.255,63,1.589,64,1.46,65,2.908,66,2.622,67,2.908,68,1.739,69,1.919,70,2.908,71,2.908,72,2.908,73,1.739,74,1.157,75,1.43,76,4.128,77,1.331,78,4.128,79,2.622,80,4.128,81,2.622,82,2.223,83,2.908,84,2.908,85,1.91,86,2.255,87,2.908,88,1.919,89,2.908,90,0.512,91,4.128,92,1.589,93,2.908,94,1.589,95,2.908,96,2.908,97,2.908,98,1.919,99,2.908,100,2.908,101,2.908,102,2.145,103,1.589]],["title/injectables/AppService.html",[27,1.813,104,1.227]],["body/injectables/AppService.html",[3,0.308,4,0.268,5,0.268,7,0.877,9,4.366,10,0.045,11,3.539,18,3.539,19,2.174,24,0.308,25,0.028,26,0.877,27,3.425,29,0.308,36,3.906,37,3.906,43,0.021,44,0.021,104,1.874,105,2.151,106,3.315,107,5.918,108,3.739,109,4.267,110,3.739,111,2.404,112,5.918,113,3.233,114,0.694,115,5.918,116,0.813,117,3.937,118,2.348,119,1.623,120,5.604,121,4.719]],["title/controllers/AuthController.html",[0,1.062,122,2.19]],["body/controllers/AuthController.html",[0,1.994,2,1.24,3,0.326,4,0.283,5,0.283,7,0.927,10,0.048,11,3.139,24,0.411,25,0.028,26,0.927,29,0.326,31,3.07,37,2.746,38,2.089,41,2.746,42,1.784,43,0.022,44,0.022,75,1.565,122,3.465,123,3.503,124,2.488,125,4.16,126,5.243,127,3.465,128,5.249,129,5.249,130,4.42,131,4.42,132,4.42,133,2.635,134,5.249,135,3.127,136,3.503,137,4.16,138,2.273,139,2.746]],["title/modules/AuthModule.html",[45,1.062,57,1.813]],["body/modules/AuthModule.html",[2,1.556,3,0.323,4,0.28,5,0.28,10,0.048,24,0.472,25,0.028,26,0.918,29,0.323,43,0.021,44,0.021,45,1.834,47,1.769,48,1.911,49,2.253,50,2.253,51,1.911,52,2.876,53,2.876,57,3.52,61,2.621,62,2.852,63,2.253,64,2.07,66,2.253,122,3.781,135,3.367,136,3.472,140,3.472,141,3.472,142,3.472,143,4.123,144,3.446,145,4.123,146,3.472]],["title/injectables/AuthService.html",[104,1.227,135,1.666]],["body/injectables/AuthService.html",[3,0.205,4,0.178,5,0.178,7,1.007,10,0.03,11,2.288,18,2.975,19,1.641,24,0.3,25,0.028,26,0.583,29,0.205,30,1.773,31,2.823,33,2.986,37,2.986,38,2.271,42,1.123,43,0.016,44,0.016,75,1.702,88,3.284,90,0.674,94,2.471,98,3.65,104,1.415,105,1.43,111,1.641,114,0.461,116,0.934,118,2.713,119,1.912,126,4.457,127,2.526,131,3.222,132,4.189,133,1.921,135,2.658,138,2.892,144,3.284,147,2.204,148,3.222,149,2.975,150,3.827,151,4.976,152,2.776,153,4.189,154,2.618,155,2.812,156,2.618,157,1.348,158,4.523,159,4.523,160,4.523,161,3.808,162,1.641,163,1.415,164,1.062,165,3.808,166,2.526,167,1.641,168,2.618,169,4.189,170,4.976,171,4.523,172,3.222,173,3.827,174,3.827,175,3.827,176,2.823,177,4.523,178,3.827,179,2.618,180,3.827,181,3.827,182,5.293,183,3.284,184,4.976,185,3.222,186,3.827,187,3.827,188,2.204,189,2.204,190,1.43,191,1.728,192,2.618,193,2.618,194,1.931]],["title/classes/CreatePostDto.html",[10,0.038,195,1.813]],["body/classes/CreatePostDto.html",[3,0.093,4,0.081,5,0.081,7,1.144,10,0.05,24,0.304,25,0.028,29,0.093,43,0.008,44,0.008,77,1.787,81,0.648,90,1.012,94,1.942,103,3.387,113,1.11,114,0.209,116,0.979,119,1.91,133,2.38,157,1.413,164,1.633,167,1.356,195,1.11,196,0.508,197,4.116,198,0.875,199,1.11,200,1.215,201,2.391,202,1.02,203,1.587,204,2.032,205,1.499,206,1.711,207,1.711,208,2.661,209,1.215,210,1.138,211,3.498,212,1.76,213,1.968,214,3.229,215,2.245,216,2.738,217,3.018,218,3.061,219,3.061,220,2.994,221,3.124,222,3.373,223,1.185,224,1.185,225,3.129,226,3.16,227,3.16,228,3.879,229,2.667,230,1.185,231,1.185,232,3.684,233,2.119,234,1.711,235,1.185,236,1.11,237,2.032,238,1.185,239,1.185,240,1.185,241,1.711,242,1.341,243,3.498,244,2.667,245,3.789,246,3.373,247,4.226,248,2.032,249,2.032,250,2.032,251,2.032,252,2.032,253,2.032,254,2.032,255,2.032,256,2.032,257,2.661,258,2.086,259,1.185,260,1.185,261,2.661,262,3.266,263,3.266,264,2.245,265,3.684,266,2.889,267,3.879,268,3.492,269,2.667,270,2.667,271,1.185,272,1.185,273,2.667,274,1.185,275,2.032,276,1.185,277,1.185,278,2.661,279,1.499,280,0.998,281,2.661,282,2.661,283,1.711,284,1.499,285,1.711,286,2.862,287,1.711,288,1.499,289,1.711,290,0.998,291,1.185,292,2.032,293,2.032,294,2.032,295,2.032,296,2.994,297,3.16,298,2.661,299,1.185,300,1.185,301,2.032,302,1.185,303,1.185,304,1.185,305,2.032,306,2.661,307,2.086,308,2.245,309,1.185,310,1.185,311,1.711,312,1.499,313,2.032,314,1.185,315,1.185,316,2.032,317,1.499,318,2.126,319,2.738,320,2.623,321,1.711,322,0.875,323,0.875,324,0.875,325,2.032,326,0.595,327,0.998,328,0.998,329,0.875,330,0.875,331,2.623,332,3.061,333,0.549,334,1.185,335,1.185,336,1.185,337,0.998,338,0.998,339,0.998,340,1.499,341,1.185,342,1.185,343,2.032,344,1.185,345,1.185,346,2.032,347,0.998,348,2.032,349,2.032,350,2.032,351,2.032,352,1.185,353,0.875,354,1.185,355,1.185,356,1.185,357,0.998,358,1.185,359,1.185,360,0.998,361,1.185]],["title/classes/CreatePostMetaOptionsDto.html",[10,0.038,233,1.813]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.318,4,0.276,5,0.276,7,0.905,10,0.069,24,0.318,25,0.027,29,0.318,43,0.021,44,0.021,77,1.661,81,3.271,90,0.716,103,2.825,114,0.716,116,0.839,119,1.656,138,2.825,157,1.211,167,2.218,196,1.743,199,2.825,200,3.093,201,3.271,205,3.816,210,1.656,233,2.825,242,3.414,245,3.816,263,4.354,317,3.816,318,3.093,326,2.04,329,3.816,353,4.197,362,2.218,363,3.421,364,5.171,365,5.171,366,4.354,367,4.063,368,4.063]],["title/classes/CreateTagsDto.html",[10,0.038,369,2.448]],["body/classes/CreateTagsDto.html",[3,0.253,4,0.22,5,0.22,7,1.218,10,0.051,24,0.348,25,0.028,29,0.253,43,0.018,44,0.018,77,1.409,90,1.01,103,2.428,113,2.428,114,0.57,116,1.184,119,2.033,157,1.709,163,1.878,164,1.644,196,1.386,210,1.423,212,3.353,216,3.353,217,4.007,221,2.231,222,3.279,279,2.385,280,2.721,281,4.605,282,4.605,283,3.742,284,3.279,285,3.742,286,3.279,287,3.742,288,3.279,289,3.742,290,2.721,317,3.279,318,3.037,319,3.611,320,4.036,321,3.742,322,2.385,323,2.385,324,2.385,326,1.623,331,3.748,332,4.036,333,1.498,337,2.721,338,2.721,339,3.742,340,3.279,347,2.721,369,3.279,370,4.989,371,2.721,372,3.232,373,3.232,374,3.232,375,3.232,376,3.232,377,3.232,378,3.232,379,3.232,380,3.232]],["title/classes/CreateUserDto.html",[10,0.038,381,1.813]],["body/classes/CreateUserDto.html",[3,0.194,4,0.169,5,0.169,7,0.553,10,0.056,24,0.194,25,0.028,29,0.194,43,0.015,44,0.015,75,1.834,90,0.855,98,3.419,113,2.01,114,0.437,116,1.001,119,2.009,157,1.446,161,3.098,163,1.793,164,1.346,167,1.578,183,3.706,185,3.098,196,1.065,199,2.01,200,2.201,201,2.01,202,1.847,203,1.847,205,2.715,210,1.553,221,2.895,222,2.715,225,2.429,232,3.098,261,5.046,265,4.567,284,2.715,286,4.255,306,3.098,308,3.098,318,2.9,319,2.429,320,3.578,322,2.715,323,1.831,324,1.831,326,1.246,340,1.831,381,2.01,382,4.361,383,1.831,384,3.68,385,3.098,386,3.098,387,3.235,388,4.385,389,2.482,390,2.482,391,3.68,392,2.482,393,2.482,394,4.083,395,2.482,396,2.482,397,3.68,398,3.68,399,3.68,400,2.482,401,3.68,402,3.68,403,3.68,404,3.68,405,4.083,406,3.68,407,5.425,408,1.578,409,4.85,410,2.482,411,3.68,412,3.68,413,3.68,414,3.68,415,3.68,416,3.68,417,3.68,418,2.482,419,4.85,420,2.482,421,2.482,422,2.482,423,2.482]],["title/classes/GetUsersParamDto.html",[10,0.038,424,1.984]],["body/classes/GetUsersParamDto.html",[3,0.258,4,0.224,5,0.224,7,1.142,10,0.059,20,3.79,24,0.402,25,0.028,29,0.258,43,0.018,44,0.018,68,2.692,75,1.946,90,0.904,111,1.931,114,0.58,116,0.68,138,2.459,157,0.982,162,2.365,164,1.653,167,2.556,196,1.413,200,2.692,201,2.459,206,4.642,207,3.79,210,1.441,220,2.773,221,2.768,225,2.972,312,2.43,319,2.972,326,1.653,332,3.322,333,1.526,408,2.2,424,2.692,425,3.79,426,2.773,427,5.513,428,4.502,429,3.322,430,3.79,431,4.502,432,3.322,433,2.733,434,5.772,435,3.293,436,3.293,437,4.502,438,3.79,439,3.79,440,4.502,441,4.502,442,3.79,443,3.322]],["title/entities/MetaOption.html",[85,1.32,444,1.423]],["body/entities/MetaOption.html",[3,0.308,4,0.267,5,0.267,10,0.045,24,0.308,25,0.028,29,0.308,43,0.021,44,0.021,82,2.835,85,2.013,90,1.078,92,2.145,114,0.692,116,1.22,119,1.62,157,1.762,210,1.62,236,2.764,266,3.902,278,4.259,353,4.13,362,2.624,408,2.17,433,2.401,444,2.17,445,3.305,446,4.712,447,4.712,448,4.712,449,3.926,450,3.695,451,3.926,452,2.591,453,3.339,454,3.926,455,4.712,456,3.926,457,3.339,458,1.684]],["title/controllers/MetaOptionsController.html",[0,1.062,459,2.19]],["body/controllers/MetaOptionsController.html",[0,1.29,2,1.201,3,0.316,4,0.274,5,0.274,10,0.046,19,2.206,24,0.444,25,0.028,26,0.897,29,0.316,41,2.659,42,1.728,43,0.021,44,0.021,77,1.656,81,2.201,82,2.383,90,0.71,111,1.728,114,0.71,116,0.831,118,1.866,124,2.409,152,2.844,157,1.201,162,1.728,163,1.49,164,1.118,233,3.502,242,3.395,330,2.972,362,2.206,459,3.395,460,3.391,461,4.18,462,4.77,463,3.391,464,4.028,465,3.391,466,3.395,467,3.095,468,3.391,469,3.391,470,2.659,471,4.028,472,4.028]],["title/modules/MetaOptionsModule.html",[45,1.062,58,1.984]],["body/modules/MetaOptionsModule.html",[2,1.568,3,0.327,4,0.284,5,0.284,10,0.048,24,0.488,25,0.028,26,0.929,29,0.327,43,0.022,44,0.022,45,1.844,47,1.79,48,1.933,49,2.28,50,2.28,51,1.933,52,2.891,53,2.095,58,3.806,62,2.873,63,2.28,64,2.095,66,2.28,73,2.495,74,1.661,81,2.873,82,1.933,85,1.661,86,2.28,362,1.79,459,3.802,467,3.477,468,3.513,469,3.513,473,3.513,474,3.513,475,4.173,476,4.173,477,4.173]],["title/injectables/MetaOptionsService.html",[104,1.227,467,1.813]],["body/injectables/MetaOptionsService.html",[3,0.292,4,0.253,5,0.253,10,0.043,19,2.097,24,0.471,25,0.028,26,0.83,29,0.292,30,2.265,42,1.598,43,0.02,44,0.02,69,2.459,74,1.483,77,1.357,81,2.982,85,1.946,86,2.035,90,0.862,102,2.749,104,1.808,105,2.035,111,1.598,114,0.657,116,1.009,118,1.726,152,2.74,162,2.097,163,1.808,164,1.357,190,2.035,191,2.459,202,1.871,233,3.438,242,2.459,330,2.749,362,2.341,366,3.137,458,1.598,462,4.595,463,3.137,467,2.671,470,2.459,478,4.595,479,3.137,480,3.726,481,3.465,482,3.726,483,4.117,484,3.726,485,2.459,486,3.137,487,3.726,488,3.726,489,3.726,490,3.726]],["title/classes/PatchPostDto.html",[10,0.038,491,2.19]],["body/classes/PatchPostDto.html",[3,0.303,4,0.263,5,0.263,7,1.116,10,0.058,24,0.436,25,0.028,29,0.303,43,0.021,44,0.021,77,1.82,90,0.98,103,2.739,114,0.682,116,0.799,157,1.154,167,2.15,195,2.115,196,1.66,198,2.856,199,3.213,209,3.325,210,1.605,279,2.856,318,2.998,326,1.943,331,3.699,333,1.794,408,2.15,433,2.724,442,4.221,491,3.309,492,4.221,493,3.699,494,5.013,495,5.013,496,4.221,497,5.013,498,3.871,499,3.871,500,4.221,501,3.259,502,2.856,503,3.259]],["title/classes/PatchUserDto.html",[10,0.038,504,2.19]],["body/classes/PatchUserDto.html",[3,0.312,4,0.271,5,0.271,7,0.887,10,0.065,24,0.4,25,0.028,29,0.312,43,0.021,44,0.021,75,1.522,90,0.9,139,3.37,164,1.563,167,2.19,196,1.708,199,3.078,209,2.381,210,2.013,225,3.37,381,3.357,383,2.938,496,5.004,501,3.352,504,3.37,505,3.352,506,5.105,507,5.943,508,5.105,509,4.744,510,5.105,511,4.744,512,3.37,513,5.105,514,4.298,515,3.352,516,3.352,517,2.938,518,3.982,519,3.982]],["title/entities/Post.html",[77,0.921,444,1.423]],["body/entities/Post.html",[3,0.197,4,0.171,5,0.171,10,0.029,24,0.382,25,0.028,29,0.197,43,0.015,44,0.015,77,1.029,82,1.162,85,1.94,86,1.371,90,1.143,92,1.371,94,3.283,114,0.442,116,1.258,119,1.975,133,2.904,157,1.791,164,1.711,210,1.188,211,3.256,212,2.913,213,3.256,214,4.268,215,3.715,216,2.913,217,2.913,218,3.256,219,3.256,236,3.16,243,1.851,262,4.87,266,2.448,307,3.595,327,2.112,328,2.112,362,1.076,408,1.591,433,1.893,444,1.591,450,2.913,452,3.818,453,4.211,457,3.899,458,1.076,520,2.112,521,4.105,522,2.509,523,4.018,524,3.123,525,2.509,526,2.509,527,2.509,528,2.509,529,4.105,530,2.737,531,2.509,532,3.709,533,2.509,534,2.509,535,3.123,536,2.737,537,2.509,538,2.509,539,2.509,540,3.709,541,2.509,542,3.709,543,3.709,544,2.509,545,2.509,546,2.509]],["title/controllers/PostsController.html",[0,1.062,547,2.19]],["body/controllers/PostsController.html",[0,1.6,2,0.788,3,0.207,4,0.18,5,0.18,7,1.183,10,0.03,19,1.653,24,0.416,25,0.028,26,0.588,29,0.207,30,1.224,36,2.543,38,2.509,41,1.744,42,1.133,43,0.016,44,0.016,69,2.543,75,1.149,77,1.76,90,1.009,103,2.105,110,2.843,111,1.653,114,0.466,116,0.939,118,2.316,119,1.456,124,1.58,133,1.934,149,2.304,152,3.005,157,1.356,162,1.95,163,1.682,164,1.262,176,2.843,195,3.323,202,1.934,203,1.934,333,1.224,466,1.744,491,3.875,493,2.843,502,2.843,503,3.244,512,2.543,530,3.355,547,2.543,548,2.225,549,4.474,550,3.853,551,3.244,552,3.853,553,3.853,554,2.225,555,3.853,556,2.843,557,3.853,558,3.853,559,4.208,560,2.642,561,2.642,562,2.642,563,3.853,564,2.642,565,3.853,566,3.853,567,3.244,568,2.642,569,3.244,570,3.244,571,2.642,572,2.642,573,2.642,574,2.73,575,2.225,576,3.829,577,3.829,578,1.95,579,2.225,580,2.642,581,2.642,582,2.642,583,2.642,584,2.642,585,3.244,586,2.225,587,2.642,588,2.642,589,2.642,590,2.642]],["title/modules/PostsModule.html",[45,1.062,59,1.984]],["body/modules/PostsModule.html",[2,1.476,3,0.297,4,0.258,5,0.258,10,0.044,24,0.502,25,0.028,26,0.846,29,0.297,43,0.02,44,0.02,45,1.869,47,2.363,48,1.759,49,2.074,50,2.074,51,1.759,52,2.765,53,1.906,59,3.911,61,3.117,62,2.705,63,2.074,64,1.906,66,2.705,73,2.271,74,1.511,77,1.053,82,1.759,85,2.47,86,2.074,146,3.197,362,1.629,547,3.636,574,3.391,575,3.197,591,3.197,592,3.197,593,3.197,594,3.797,595,3.797,596,3.197,597,3.797,598,3.197,599,3.197,600,3.797,601,3.797]],["title/injectables/PostsService.html",[104,1.227,574,1.813]],["body/injectables/PostsService.html",[2,0.635,3,0.167,4,0.145,5,0.145,7,0.89,10,0.025,18,2.896,19,1.924,24,0.417,25,0.028,26,0.474,29,0.167,30,2.078,33,2.637,34,2.947,38,1.645,42,0.913,43,0.013,44,0.013,69,2.961,74,0.847,75,1.907,77,1.707,82,0.986,85,0.847,86,1.163,88,1.405,90,0.704,104,1.212,105,1.163,108,2.418,111,1.405,113,1.79,114,0.375,116,0.825,118,2.078,119,1.279,127,2.163,138,1.163,139,2.163,148,2.759,149,1.959,152,2.568,155,2.792,162,1.713,163,1.477,164,1.108,166,2.163,167,1.924,169,2.759,172,2.759,188,1.792,190,2.182,191,1.405,195,2.795,202,1.645,203,1.645,209,1.959,211,3.774,213,3.31,219,3.31,221,2.252,234,1.792,243,2.418,245,2.418,362,0.913,385,2.759,429,2.418,433,1.924,438,2.759,443,2.947,458,0.913,461,2.947,466,1.405,481,3.187,483,3.363,485,1.405,486,1.792,502,1.571,549,5.073,551,3.777,554,1.792,556,2.418,559,2.759,567,2.759,574,2.451,579,1.792,586,1.792,596,1.792,602,1.792,603,2.418,604,3.277,605,2.759,606,2.129,607,3.995,608,2.129,609,3.277,610,3.277,611,3.277,612,2.129,613,3.277,614,3.277,615,2.129,616,3.277,617,2.759,618,2.163,619,3.277,620,2.759,621,3.277,622,3.277,623,2.759,624,3.277,625,2.129,626,2.129,627,2.129,628,2.759,629,2.759,630,2.163,631,2.129,632,3.995,633,2.129,634,2.129,635,1.792,636,2.129,637,2.129]],["title/entities/Tag.html",[79,1.813,444,1.423]],["body/entities/Tag.html",[3,0.228,4,0.198,5,0.198,7,1.07,10,0.034,24,0.228,25,0.028,29,0.228,43,0.017,44,0.017,79,2.258,90,1.136,92,1.592,94,3.396,114,0.513,116,1.265,119,1.99,157,1.827,163,1.777,164,1.591,210,1.324,212,3.171,216,3.171,217,3.171,236,2.856,266,3.785,307,3.785,408,1.773,433,2.061,444,2.061,446,4.045,447,4.045,448,4.045,450,3.171,452,3.644,453,4.103,455,4.045,457,3.785,458,1.25,521,4.402,523,4.231,524,3.48,535,4.402,536,3.858,598,2.453,638,2.453,639,4.804,640,2.914,641,4.804,642,2.914,643,2.914,644,2.914,645,2.914,646,2.914,647,2.914,648,2.914,649,2.914,650,2.453,651,2.914,652,2.914,653,2.15,654,2.914,655,2.914,656,2.914]],["title/controllers/TagsController.html",[0,1.062,657,2.19]],["body/controllers/TagsController.html",[0,1.567,2,1.458,3,0.383,4,0.333,5,0.333,10,0.056,24,0.454,25,0.027,26,1.09,29,0.383,43,0.024,44,0.024,124,2.926,218,3.61,333,2.267,578,3.61,657,3.826,658,4.119,659,4.892,660,4.892]],["title/modules/TagsModule.html",[45,1.062,60,1.984]],["body/modules/TagsModule.html",[2,1.649,3,0.355,4,0.308,5,0.308,10,0.052,24,0.5,25,0.028,26,1.008,29,0.355,43,0.023,44,0.023,45,1.771,47,1.941,52,2.272,53,2.272,60,3.308,66,2.473,73,2.707,74,1.801,79,2.473,657,3.943,661,4.526,662,4.526,663,3.651,664,4.526,665,3.811,666,4.526]],["title/classes/TagsService.html",[10,0.038,663,2.19]],["body/classes/TagsService.html",[3,0.357,4,0.31,5,0.31,10,0.053,24,0.469,25,0.028,29,0.357,30,2.573,43,0.023,44,0.023,74,1.813,79,2.489,90,0.803,116,0.94,162,1.954,163,1.685,164,1.264,190,2.489,196,1.954,458,1.954,481,3.729,485,3.007,663,3.666,665,3.836,667,3.836,668,4.556,669,4.556,670,5.553,671,4.556]],["title/entities/User.html",[75,0.989,444,1.423]],["body/entities/User.html",[3,0.269,4,0.233,5,0.233,10,0.04,24,0.269,25,0.028,29,0.269,43,0.019,44,0.019,75,1.38,90,1.12,92,1.875,94,3.064,98,3.458,114,0.605,116,1.209,119,2.008,157,1.745,183,3.458,210,1.482,236,3.296,307,4.139,387,3.865,408,1.985,433,2.405,444,1.985,450,3.458,452,3.702,453,4.139,457,3.865,458,1.472,523,4.627,536,3.416,672,2.889,673,5.238,674,6.27,675,3.432,676,3.432,677,3.432,678,3.432,679,3.432,680,3.432,681,3.432,682,3.432,683,3.432]],["title/controllers/UsersController.html",[0,1.062,684,2.19]],["body/controllers/UsersController.html",[0,1.021,2,0.452,3,0.119,4,0.103,5,0.103,7,1.157,10,0.037,11,1.495,12,2.104,13,2.104,14,3.445,19,1.368,24,0.381,25,0.028,26,0.557,29,0.119,30,0.702,32,3.114,33,1.65,34,1.119,38,2.443,42,0.65,43,0.018,44,0.01,68,3.494,75,1.827,77,1.441,90,0.82,108,1.119,111,1.997,113,1.365,114,0.267,116,0.658,118,2.04,124,0.907,127,1.65,130,2.104,133,0.761,138,0.828,139,2.105,149,1.495,152,2.73,155,1.896,157,0.95,162,1.997,163,1.513,164,1.292,165,1.276,166,1.001,167,2.376,176,1.844,190,0.828,199,2.235,200,2.212,201,2.235,202,1.857,203,1.857,208,3.445,221,1.857,236,2.021,246,1.119,258,3.656,333,0.702,357,3.114,360,1.276,381,2.909,386,4.246,408,2.554,424,2.784,429,1.844,430,2.104,433,1.997,443,3.019,466,2.105,470,1.001,493,3.249,500,2.104,504,3.515,511,2.104,512,1.65,517,1.844,529,3.114,530,1.119,556,1.844,569,2.104,570,2.104,576,2.104,577,2.104,578,1.119,585,1.276,599,1.276,603,1.844,617,3.114,618,2.105,620,2.104,623,2.104,630,1.65,650,2.685,684,1.65,685,1.276,686,2.499,687,2.685,688,3.188,689,2.499,690,1.276,691,1.516,692,3.698,693,2.499,694,1.516,695,4.738,696,1.516,697,1.516,698,1.516,699,1.516,700,3.698,701,1.516,702,2.499,703,4.656,704,2.499,705,2.499,706,3.188,707,1.516,708,1.516,709,2.499,710,3.188,711,3.188,712,3.698,713,1.516,714,2.499,715,1.276,716,1.276,717,1.516,718,1.276,719,3.188,720,1.516,721,2.104,722,1.516,723,1.516,724,1.516,725,1.516,726,3.188,727,2.499,728,1.516,729,1.516,730,1.516,731,1.516,732,3.698,733,3.698,734,1.516,735,1.516,736,2.499,737,1.516,738,2.499,739,2.499,740,1.516,741,1.516,742,1.516,743,1.276,744,1.516,745,1.516,746,1.516,747,1.516,748,1.516,749,1.516,750,1.276,751,1.516,752,1.516,753,1.516,754,1.516,755,1.516,756,1.516,757,1.516,758,1.516,759,2.499,760,1.516,761,1.516,762,1.516,763,1.516,764,1.516,765,1.276,766,1.516]],["title/modules/UsersModule.html",[45,1.062,61,1.666]],["body/modules/UsersModule.html",[2,1.513,3,0.309,4,0.269,5,0.269,10,0.046,24,0.491,25,0.028,26,0.879,29,0.398,43,0.021,44,0.021,45,1.797,47,1.693,48,1.829,49,2.157,50,2.157,51,1.829,52,2.974,53,2.818,57,2.774,61,3.203,62,2.774,63,2.157,64,1.982,66,2.157,73,2.361,74,1.571,75,1.177,144,3.351,155,3.088,684,3.704,718,3.324,767,3.324,768,3.324,769,3.324,770,3.948,771,3.948,772,3.948,773,3.324,774,3.948,775,3.324]],["title/injectables/UsersService.html",[104,1.227,155,1.537]],["body/injectables/UsersService.html",[3,0.185,4,0.161,5,0.161,7,0.526,10,0.049,18,2.119,19,1.52,24,0.433,25,0.028,26,0.526,29,0.185,30,2.192,35,1.987,36,2.339,38,1.779,42,1.012,43,0.015,44,0.015,68,3.032,74,0.939,75,1.732,88,1.558,90,0.834,102,3.49,104,1.31,105,1.289,110,3.49,111,1.825,114,0.416,116,0.976,118,2.192,119,1.705,121,2.984,135,2.852,144,1.558,149,2.119,152,2.917,153,1.987,155,1.642,162,2.029,163,1.749,164,1.312,183,3.645,189,1.987,190,1.936,191,2.339,194,1.741,201,1.936,202,1.779,203,2.136,209,1.411,258,3.122,381,2.77,387,3.741,408,2.284,424,3.184,433,2.369,458,1.012,461,3.14,465,1.987,470,1.558,481,2.829,485,1.558,517,1.741,605,3.583,618,2.339,628,1.987,629,1.987,630,1.558,635,2.984,653,2.615,687,2.984,690,2.984,695,3.983,715,1.987,716,1.987,743,2.984,750,1.987,773,1.987,776,1.987,777,3.544,778,3.544,779,3.544,780,2.36,781,4.255,782,2.36,783,2.36,784,2.36,785,2.36,786,3.544,787,3.544,788,2.36,789,3.544,790,2.36,791,2.36,792,2.36,793,2.36,794,2.36,795,2.36,796,2.36,797,2.36,798,4.255,799,2.36,800,2.36,801,2.36,802,2.36,803,3.544,804,2.36,805,2.36,806,2.36,807,2.36]],["title/coverage.html",[808,3.339]],["body/coverage.html",[0,1.899,1,2.138,5,0.22,6,2.728,10,0.071,25,0.028,27,1.77,43,0.018,44,0.018,51,1.501,68,1.937,75,0.966,77,1.235,79,1.77,82,2.062,85,1.289,90,0.571,104,2.122,106,2.728,122,2.138,123,2.728,135,1.626,147,2.728,155,1.501,195,1.77,197,2.728,198,3.284,203,1.626,233,1.77,329,2.39,362,2.348,363,2.728,369,2.39,370,2.728,371,2.728,381,1.77,382,2.728,383,3.284,394,2.728,424,1.937,425,2.728,426,2.728,432,2.39,444,2.348,445,2.728,459,2.138,460,2.728,467,1.77,478,2.728,479,2.728,491,2.138,492,2.728,504,2.138,505,2.728,520,2.728,547,2.138,548,2.728,574,1.77,602,2.728,638,2.728,653,2.39,657,2.138,658,2.728,663,2.138,667,2.728,672,2.728,684,2.138,685,2.728,776,2.728,808,2.39,809,3.24,810,3.24,811,6.552,812,5.475,813,5.085,814,5.475,815,2.728,816,3.24,817,3.24,818,6.277,819,5.739,820,4.451,821,3.24,822,3.24,823,3.24,824,4.451,825,3.24]],["title/dependencies.html",[48,1.849,826,2.334]],["body/dependencies.html",[10,0.064,25,0.028,26,1.015,43,0.023,44,0.023,48,2.111,74,1.813,241,3.836,312,3.361,326,2.287,333,2.111,458,1.954,515,3.836,516,3.836,721,3.836,827,4.556,828,4.556,829,5.991,830,4.556,831,4.556,832,4.556,833,4.556,834,4.556,835,4.556,836,4.556,837,4.556,838,4.556,839,4.556,840,4.556,841,4.556,842,4.556,843,4.556]],["title/miscellaneous/enumerations.html",[844,1.83,845,3.359]],["body/miscellaneous/enumerations.html",[25,0.028,43,0.023,44,0.023,77,1.547,114,0.808,133,2.799,214,4.114,247,5.601,257,4.695,258,3.681,264,4.695,268,4.695,296,4.695,298,4.695,844,3.027,845,3.861,846,4.586,847,4.586,848,4.586,849,4.586,850,5.576]],["title/miscellaneous/functions.html",[844,1.83,851,3.359]],["body/miscellaneous/functions.html",[25,0.024,43,0.024,44,0.024,51,2.918,114,0.903,815,4.317,844,3.384,851,4.317,852,5.127,853,5.127,854,5.127,855,5.127]],["title/index.html",[114,0.489,765,2.334,856,2.773]],["body/index.html",[4,0.189,7,0.619,9,4.165,22,4.391,23,3.94,25,0.027,43,0.016,44,0.016,64,2.834,109,2.34,166,1.835,194,4.165,221,2.569,246,2.051,288,2.051,432,2.949,439,2.34,481,1.662,509,2.34,512,1.835,514,2.34,603,2.051,618,1.835,630,1.835,808,2.051,857,2.78,858,2.78,859,3.997,860,2.78,861,2.78,862,2.78,863,2.78,864,3.997,865,4.68,866,2.78,867,2.78,868,5.117,869,2.78,870,5.952,871,2.78,872,5.816,873,2.78,874,2.78,875,3.997,876,2.78,877,3.997,878,2.78,879,4.68,880,2.78,881,3.997,882,2.78,883,2.78,884,2.78,885,2.78,886,2.78,887,5.117,888,3.997,889,2.78,890,2.78,891,2.78,892,2.78,893,3.997,894,5.117,895,2.78,896,3.997,897,2.78,898,2.78,899,3.997,900,5.645,901,5.117,902,2.78,903,3.997,904,2.78,905,2.78,906,2.78,907,5.117,908,2.78,909,2.78,910,2.78,911,3.997,912,2.78,913,2.78,914,2.78,915,2.78,916,3.997,917,2.78,918,2.78,919,2.78,920,3.997,921,2.78,922,2.78,923,4.309,924,3.997,925,2.78,926,2.78,927,2.78,928,2.78,929,2.78,930,2.78,931,2.78,932,2.78,933,3.997,934,2.78,935,2.34,936,2.78,937,4.68,938,2.78,939,2.78,940,2.78,941,2.78,942,3.997,943,2.78,944,2.78,945,2.78,946,2.78,947,3.997,948,2.78,949,2.78,950,2.78,951,3.997,952,3.997,953,2.78,954,2.78,955,2.78,956,2.78,957,2.78,958,2.78,959,2.78,960,2.78,961,2.78,962,2.78,963,2.34,964,2.78,965,2.78,966,2.78,967,2.78,968,2.78,969,2.78,970,2.34]],["title/modules.html",[47,1.941]],["body/modules.html",[25,0.023,43,0.023,44,0.023,46,3.163,47,2.055,57,2.618,58,2.865,59,2.865,60,2.865,61,2.405,775,4.034,923,5.458,935,4.034,971,6.483,972,6.483,973,6.58]],["title/overview.html",[974,3.81]],["body/overview.html",[2,1.09,25,0.028,27,2.955,43,0.02,44,0.02,45,1.171,46,4.397,47,1.569,48,1.694,49,1.998,50,1.998,51,1.694,52,1.836,53,1.836,54,3.079,55,3.079,56,3.079,57,3.356,58,3.577,59,3.848,60,3.234,61,3.146,62,2.639,63,1.998,64,1.836,85,2.152,92,1.998,105,1.998,135,3.146,140,3.079,141,3.079,142,3.079,155,2.903,196,1.569,311,3.079,405,3.079,467,2.955,473,3.079,474,3.079,574,2.955,591,3.079,592,3.079,593,3.079,767,3.079,768,3.079,769,3.079,974,3.079,975,4.83,976,3.657]],["title/properties.html",[210,1.277,826,2.334]],["body/properties.html",[7,1.142,25,0.027,43,0.024,44,0.024,210,1.642,963,4.317,970,4.317,977,5.127,978,5.127,979,5.127]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":978,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t12:00:00z",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t12:00:00z'})@isoptional()@isiso8601",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":443,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":812,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":706,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":811,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":524,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":699,"title":{},"body":{"controllers/UsersController.html":{}}}],["11/11",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["1})@isoptional()@isint()@type(undefined",{"_index":435,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":632,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":813,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":570,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":558,"title":{},"body":{"controllers/PostsController.html":{}}}],["2022",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":535,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["4",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4/4",{"_index":814,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":976,"title":{},"body":{"overview.html":{}}}],["5/5",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["512",{"_index":540,"title":{},"body":{"entities/Post.html":{}}}],["5432",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":975,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["8.11.5",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["96",{"_index":674,"title":{},"body":{"entities/User.html":{}}}],["accepts",{"_index":692,"title":{},"body":{"controllers/UsersController.html":{}}}],["account",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["actual",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":637,"title":{},"body":{"injectables/PostsService.html":{}}}],["address",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["against",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allow",{"_index":610,"title":{},"body":{"injectables/PostsService.html":{}}}],["allowing",{"_index":912,"title":{},"body":{"index.html":{}}}],["allows",{"_index":654,"title":{},"body":{"entities/Tag.html":{}}}],["alphanumeric",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["already",{"_index":792,"title":{},"body":{"injectables/UsersService.html":{}}}],["always",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":957,"title":{},"body":{"index.html":{}}}],["api",{"_index":437,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apioperation",{"_index":576,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":555,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":376,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apiproperty({description",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":378,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":372,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":374,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apipropertyoptional({description",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":719,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":577,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":578,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":582,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":660,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":723,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":855,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":864,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":46,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approach",{"_index":725,"title":{},"body":{"controllers/UsersController.html":{}}}],["appservice",{"_index":27,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["associated",{"_index":621,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":461,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":122,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authmodule",{"_index":57,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":963,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":135,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["automatically",{"_index":683,"title":{},"body":{"entities/User.html":{}}}],["available",{"_index":775,"title":{},"body":{"modules/UsersModule.html":{},"modules.html":{}}}],["await",{"_index":635,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":903,"title":{},"body":{"index.html":{}}}],["backers",{"_index":958,"title":{},"body":{"index.html":{}}}],["based",{"_index":898,"title":{},"body":{"index.html":{}}}],["basic",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["below",{"_index":758,"title":{},"body":{"controllers/UsersController.html":{}}}],["between",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["blog",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":950,"title":{},"body":{"index.html":{}}}],["body",{"_index":466,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":752,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["boostrap",{"_index":853,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":973,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":971,"title":{},"body":{"modules.html":{}}}],["building",{"_index":859,"title":{},"body":{"index.html":{}}}],["business",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["call",{"_index":786,"title":{},"body":{"injectables/UsersService.html":{}}}],["can't",{"_index":742,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":926,"title":{},"body":{"index.html":{}}}],["character",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["chars",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checking",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["circular",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":10,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/TagsService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/TagsService.html":{},"overview.html":{}}}],["clicks",{"_index":911,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":897,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":473,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":474,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":591,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":592,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":593,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":767,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":768,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":769,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":457,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column('simple",{"_index":546,"title":{},"body":{"entities/Post.html":{}}}],["column({type",{"_index":452,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":917,"title":{},"body":{"index.html":{}}}],["commented",{"_index":741,"title":{},"body":{"controllers/UsersController.html":{}}}],["compodoc/compodoc",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":626,"title":{},"body":{"injectables/PostsService.html":{}}}],["confirmation",{"_index":693,"title":{},"body":{"controllers/UsersController.html":{}}}],["connect",{"_index":777,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createpostdto",{"_index":587,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(getusersparamdto",{"_index":750,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["console.log(headers",{"_index":756,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(id",{"_index":737,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(ip",{"_index":757,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":802,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(limit",{"_index":738,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(page",{"_index":751,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(params",{"_index":730,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostdto",{"_index":590,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(query",{"_index":731,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(request",{"_index":764,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":780,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionsrepository",{"_index":480,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{}}}],["constructor(tagrepository",{"_index":668,"title":{},"body":{"classes/TagsService.html":{}}}],["constructor(userservice",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersservice",{"_index":606,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructs",{"_index":619,"title":{},"body":{"injectables/PostsService.html":{}}}],["contain",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["containing",{"_index":624,"title":{},"body":{"injectables/PostsService.html":{}}}],["contains",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["content",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":471,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":581,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":659,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":722,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corrected",{"_index":628,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["corresponding",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["courses",{"_index":932,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":808,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createdat",{"_index":446,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":448,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createpost",{"_index":551,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":586,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(createpostdto",{"_index":554,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":195,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":633,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto})@post",{"_index":560,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostmetaoptions",{"_index":462,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["createpostmetaoptions(createpostmetaoptionsdto",{"_index":463,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["createpostmetaoptionsdto",{"_index":233,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdtor",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["creates",{"_index":556,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["createtagsdto",{"_index":369,"title":{"classes/CreateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"coverage.html":{}}}],["createuser",{"_index":687,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@req",{"_index":763,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":690,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":381,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":796,"title":{},"body":{"injectables/UsersService.html":{}}}],["creating",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{}}}],["current",{"_index":700,"title":{},"body":{"controllers/UsersController.html":{}}}],["currently",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorated",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"classes/GetUsersParamDto.html":{}}}],["decorator",{"_index":650,"title":{},"body":{"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["decorators",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":928,"title":{},"body":{"index.html":{}}}],["default",{"_index":529,"title":{},"body":{"entities/Post.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":713,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":748,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":746,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defines",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["defining",{"_index":364,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["delegates",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["delete",{"_index":656,"title":{},"body":{"entities/Tag.html":{}}}],["deletedat",{"_index":639,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":641,"title":{},"body":{"entities/Tag.html":{}}}],["dependencies",{"_index":48,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["deploy",{"_index":887,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":902,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":893,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":910,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":873,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":938,"title":{},"body":{"index.html":{}}}],["digit",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["discord",{"_index":925,"title":{},"body":{"index.html":{}}}],["dive",{"_index":927,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":432,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{},"index.html":{}}}],["doe",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":681,"title":{},"body":{"entities/User.html":{}}}],["dots/create",{"_index":579,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dots/patch",{"_index":580,"title":{},"body":{"controllers/PostsController.html":{}}}],["draft",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["dtos/create",{"_index":470,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":715,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":717,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":882,"title":{},"body":{"index.html":{}}}],["each",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/PostsService.html":{}}}],["efficient",{"_index":860,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":891,"title":{},"body":{"index.html":{}}}],["email",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["end",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["endpoint",{"_index":733,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoints",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":439,"title":{},"body":{"classes/GetUsersParamDto.html":{},"index.html":{}}}],["enterprise",{"_index":941,"title":{},"body":{"index.html":{}}}],["entire",{"_index":652,"title":{},"body":{"entities/Tag.html":{}}}],["entities",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":444,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":845,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["example",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exceed",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exception",{"_index":797,"title":{},"body":{"injectables/UsersService.html":{}}}],["execution",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["existing",{"_index":569,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["existinguser",{"_index":794,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":793,"title":{},"body":{"injectables/UsersService.html":{}}}],["experience",{"_index":930,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":600,"title":{},"body":{"modules/PostsModule.html":{}}}],["export",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exported",{"_index":601,"title":{},"body":{"modules/PostsModule.html":{}}}],["exports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exposes",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["express",{"_index":721,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":496,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["extracted",{"_index":744,"title":{},"body":{"controllers/UsersController.html":{}}}],["false",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":905,"title":{},"body":{"index.html":{}}}],["featured",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":914,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":623,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":617,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["fetching",{"_index":427,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["few",{"_index":907,"title":{},"body":{"index.html":{}}}],["field",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fields",{"_index":513,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":789,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":605,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall('12345",{"_index":622,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(getusersparamdto",{"_index":784,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":614,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":779,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":787,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["firstname",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":913,"title":{},"body":{"index.html":{}}}],["follow",{"_index":944,"title":{},"body":{"index.html":{}}}],["format",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["forwardref",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["full",{"_index":940,"title":{},"body":{"index.html":{}}}],["functino",{"_index":854,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":851,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":909,"title":{},"body":{"index.html":{}}}],["generate",{"_index":682,"title":{},"body":{"entities/User.html":{}}}],["generates",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":727,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional",{"_index":734,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":696,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":563,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":115,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":552,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":583,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":562,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":856,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":688,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":729,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param('id",{"_index":735,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":694,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":424,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["given",{"_index":438,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{}}}],["good",{"_index":760,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":935,"title":{},"body":{"index.html":{},"modules.html":{}}}],["greater",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["greeting",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["grow",{"_index":954,"title":{},"body":{"index.html":{}}}],["handle",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/UsersService.html":{}}}],["handles",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["handling",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["hands",{"_index":929,"title":{},"body":{"index.html":{}}}],["handy",{"_index":918,"title":{},"body":{"index.html":{}}}],["headers",{"_index":710,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":120,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":933,"title":{},"body":{"index.html":{}}}],["helps",{"_index":519,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["here",{"_index":630,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["host",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["http",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["https://example.com/featured",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":967,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:v/schema.org",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:v\\/schema.org",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphen",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["hyphen.'})@maxlength(256)@minlength(3",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["hyphens",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["id",{"_index":433,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":809,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image.jpg",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implementation",{"_index":490,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["implements",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imported",{"_index":599,"title":{},"body":{"modules/PostsModule.html":{},"controllers/UsersController.html":{}}}],["imports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["included",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["incoming",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":114,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["indicate",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["indicating",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":895,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":915,"title":{},"body":{"index.html":{}}}],["inherit",{"_index":508,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["inject",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":104,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["injecting",{"_index":724,"title":{},"body":{"controllers/UsersController.html":{}}}],["injection",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["injectrepository",{"_index":485,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":486,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":627,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":671,"title":{},"body":{"classes/TagsService.html":{}}}],["injectrepository(user",{"_index":791,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":609,"title":{},"body":{"injectables/PostsService.html":{}}}],["input",{"_index":494,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["install",{"_index":908,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":871,"title":{},"body":{"index.html":{}}}],["instance",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["integer",{"_index":441,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["interact",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["interaction",{"_index":611,"title":{},"body":{"injectables/PostsService.html":{}}}],["ip",{"_index":711,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isdate",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":442,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{}}}],["isnotempty",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":367,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["iso8601",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@maxlength(96",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issues",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["isurl",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["it's",{"_index":440,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["items",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":947,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":949,"title":{},"body":{"index.html":{}}}],["john",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["join",{"_index":960,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":542,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":964,"title":{},"body":{"index.html":{}}}],["key",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["last",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastname",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastnname",{"_index":673,"title":{},"body":{"entities/User.html":{}}}],["learn",{"_index":921,"title":{},"body":{"index.html":{}}}],["legend",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":970,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":952,"title":{},"body":{"index.html":{}}}],["limit",{"_index":695,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":946,"title":{},"body":{"index.html":{}}}],["list",{"_index":620,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["localhost",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["logic",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(email",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":896,"title":{},"body":{"index.html":{}}}],["loop",{"_index":943,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["main",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["main.ts",{"_index":754,"title":{},"body":{"controllers/UsersController.html":{}}}],["make",{"_index":728,"title":{},"body":{"controllers/UsersController.html":{}}}],["makes",{"_index":509,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["managin",{"_index":550,"title":{},"body":{"controllers/PostsController.html":{}}}],["managing",{"_index":603,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["mapped",{"_index":518,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["mapping",{"_index":495,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["match",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["matching",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":900,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["maxlength(256",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["maxlength(512",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["meta",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{}}}],["metadata",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["metaoption",{"_index":85,"title":{"entities/MetaOption.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["metaoptions",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.dto",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoptions.dto.ts",{"_index":363,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:9",{"_index":368,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptionscontroller",{"_index":459,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":58,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":483,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":467,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":844,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":951,"title":{},"body":{"index.html":{}}}],["mode",{"_index":875,"title":{},"body":{"index.html":{}}}],["module",{"_index":45,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":47,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":894,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":965,"title":{},"body":{"index.html":{}}}],["name",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":762,"title":{},"body":{"controllers/UsersController.html":{}}}],["need",{"_index":514,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["nest",{"_index":865,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":969,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":515,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":798,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":858,"title":{},"body":{"index.html":{}}}],["now",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":870,"title":{},"body":{"index.html":{}}}],["null",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["nullable",{"_index":453,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":948,"title":{},"body":{"index.html":{}}}],["official",{"_index":901,"title":{},"body":{"index.html":{}}}],["one",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["onetoone",{"_index":543,"title":{},"body":{"entities/Post.html":{}}}],["onetoone(undefined)@joincolumn",{"_index":527,"title":{},"body":{"entities/Post.html":{}}}],["open",{"_index":953,"title":{},"body":{"index.html":{}}}],["operations",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["option",{"_index":366,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"injectables/MetaOptionsService.html":{}}}],["option.entity",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":445,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:12",{"_index":451,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:18",{"_index":454,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":449,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":456,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.service",{"_index":469,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["option.service.ts",{"_index":479,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["option.service.ts:13",{"_index":484,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["option.service.ts:8",{"_index":482,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["option1",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option2",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option3",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.controller",{"_index":476,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":460,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":464,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":475,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options/dtos/create",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":478,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":974,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@ssw0rd123",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["package",{"_index":826,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":704,"title":{},"body":{"controllers/UsersController.html":{}}}],["pairs",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":745,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":716,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":426,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:26",{"_index":436,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameter",{"_index":705,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":726,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":712,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":939,"title":{},"body":{"index.html":{}}}],["partial",{"_index":511,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":501,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":497,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":507,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":493,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patching",{"_index":709,"title":{},"body":{"controllers/UsersController.html":{}}}],["patching/updating",{"_index":506,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["patchpostdto",{"_index":491,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostdto})@patch",{"_index":571,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":689,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":766,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":707,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":504,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["perform",{"_index":778,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":739,"title":{},"body":{"controllers/UsersController.html":{}}}],["placeholder",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["platform",{"_index":899,"title":{},"body":{"index.html":{}}}],["please",{"_index":924,"title":{},"body":{"index.html":{}}}],["port",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":892,"title":{},"body":{"index.html":{}}}],["post",{"_index":77,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":557,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(512",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.'})@isstring()@isoptional",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":502,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:104",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:118",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:132",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:145",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:17",{"_index":499,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:190",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:42",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":596,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postgres",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":549,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":595,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/post.entity",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":547,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":59,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":607,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":574,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":544,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarycolumn",{"_index":680,"title":{},"body":{"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":450,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":877,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":857,"title":{},"body":{"index.html":{}}}],["project",{"_index":868,"title":{},"body":{"index.html":{}}}],["properties",{"_index":210,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":468,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":575,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":664,"title":{},"body":{"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":718,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["public",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isenum(status)@isnotempty",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":703,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":736,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":747,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":922,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["raja",{"_index":806,"title":{},"body":{"injectables/UsersService.html":{}}}],["raja@gmail.com",{"_index":807,"title":{},"body":{"injectables/UsersService.html":{}}}],["ramesh",{"_index":804,"title":{},"body":{"injectables/UsersService.html":{}}}],["ramesh@gmail.com",{"_index":805,"title":{},"body":{"injectables/UsersService.html":{}}}],["ramya",{"_index":121,"title":{},"body":{"injectables/AppService.html":{},"injectables/UsersService.html":{}}}],["ramya@gmail.com",{"_index":803,"title":{},"body":{"injectables/UsersService.html":{}}}],["randomly",{"_index":566,"title":{},"body":{"controllers/PostsController.html":{}}}],["read",{"_index":961,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":886,"title":{},"body":{"index.html":{}}}],["real",{"_index":936,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["related",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["replaced",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":481,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":720,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":906,"title":{},"body":{"index.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["resources",{"_index":916,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["results",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["retrieves",{"_index":616,"title":{},"body":{"injectables/PostsService.html":{}}}],["retrieving",{"_index":429,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["root",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["rules",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["run",{"_index":872,"title":{},"body":{"index.html":{}}}],["runs",{"_index":890,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["saving",{"_index":489,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["scalable",{"_index":861,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scheduled",{"_index":850,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sent",{"_index":732,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series'})@isenum(posttype)@isnotempty",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":862,"title":{},"body":{"index.html":{}}}],["service",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["services",{"_index":625,"title":{},"body":{"injectables/PostsService.html":{}}}],["set",{"_index":651,"title":{},"body":{"entities/Tag.html":{}}}],["setup",{"_index":869,"title":{},"body":{"index.html":{}}}],["side",{"_index":863,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["simulates",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["single",{"_index":743,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["slug",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["slugs",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["soft",{"_index":655,"title":{},"body":{"entities/Tag.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":434,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["specified",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["specify",{"_index":428,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["speciif",{"_index":565,"title":{},"body":{"controllers/PostsController.html":{}}}],["sponsors",{"_index":956,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":852,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":847,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":846,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":772,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":790,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:27",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:37",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":362,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dots/create",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dots/patch",{"_index":492,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":849,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":848,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity.ts",{"_index":520,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:15",{"_index":526,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:22",{"_index":541,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:30",{"_index":531,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:38",{"_index":537,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:46",{"_index":538,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:52",{"_index":522,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:58",{"_index":534,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:65",{"_index":525,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:71",{"_index":533,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:75",{"_index":528,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":539,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":548,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:22",{"_index":564,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":561,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:58",{"_index":572,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":594,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":602,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:15",{"_index":608,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:38",{"_index":615,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:64",{"_index":612,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":370,"title":{},"body":{"classes/CreateTagsDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":667,"title":{},"body":{"classes/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:5",{"_index":669,"title":{},"body":{"classes/TagsService.html":{}}}],["src/tags/tag.entity.ts",{"_index":638,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:13",{"_index":645,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:21",{"_index":646,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":648,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":643,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:41",{"_index":647,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":644,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":640,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:54",{"_index":649,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:57",{"_index":642,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":658,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.module.ts",{"_index":661,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":425,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":505,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":776,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:13",{"_index":782,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:28",{"_index":783,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:46",{"_index":785,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:75",{"_index":788,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":672,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":676,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":678,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":675,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":679,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":677,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:109",{"_index":691,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:137",{"_index":708,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:88",{"_index":701,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":770,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"index.html":{}}}],["start:dev",{"_index":876,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":878,"title":{},"body":{"index.html":{}}}],["started",{"_index":765,"title":{"index.html":{}},"body":{"controllers/UsersController.html":{}}}],["starter",{"_index":867,"title":{},"body":{"index.html":{}}}],["statements",{"_index":810,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["status.draft",{"_index":545,"title":{},"body":{"entities/Post.html":{}}}],["stay",{"_index":942,"title":{},"body":{"index.html":{}}}],["steps",{"_index":888,"title":{},"body":{"index.html":{}}}],["story",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":904,"title":{},"body":{"index.html":{}}}],["string",{"_index":119,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["strings",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["structure",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["succesfully",{"_index":740,"title":{},"body":{"controllers/UsersController.html":{}}}],["succesfully'})@apiquery({name",{"_index":698,"title":{},"body":{"controllers/UsersController.html":{}}}],["success",{"_index":613,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfully",{"_index":559,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["such",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["summary",{"_index":585,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":923,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":430,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["svg",{"_index":972,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":431,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["synchronize",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":653,"title":{},"body":{"entities/Tag.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":79,"title":{"entities/Tag.html":{}},"body":{"modules/AppModule.html":{},"entities/Tag.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"coverage.html":{}}}],["tag.entity",{"_index":665,"title":{},"body":{"modules/TagsModule.html":{},"classes/TagsService.html":{}}}],["tag1",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag3",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tagrepository",{"_index":670,"title":{},"body":{"classes/TagsService.html":{}}}],["tags",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":662,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.dto.ts",{"_index":371,"title":{},"body":{"classes/CreateTagsDto.html":{},"coverage.html":{}}}],["tags.dto.ts:19",{"_index":377,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:33",{"_index":380,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:38",{"_index":373,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:43",{"_index":379,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:49",{"_index":375,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags/tag.entity",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":657,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":60,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":663,"title":{"classes/TagsService.html":{}},"body":{"modules/TagsModule.html":{},"classes/TagsService.html":{},"coverage.html":{}}}],["take",{"_index":889,"title":{},"body":{"index.html":{}}}],["test",{"_index":881,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":884,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":883,"title":{},"body":{"index.html":{}}}],["tests",{"_index":879,"title":{},"body":{"index.html":{}}}],["text",{"_index":521,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":955,"title":{},"body":{"index.html":{}}}],["things",{"_index":598,"title":{},"body":{"modules/PostsModule.html":{},"entities/Tag.html":{}}}],["this.authservice.isauth",{"_index":801,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionsrepository.create",{"_index":487,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.create(createpostdto.metaoptions",{"_index":634,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":488,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoptions",{"_index":636,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsservice.createpostmetaoptions",{"_index":472,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsservice.createpost",{"_index":588,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":584,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findonebyid('1234",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":799,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":795,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":800,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":755,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":749,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":631,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":937,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":532,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":962,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["transform",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["transformer",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@minlength(3",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":968,"title":{},"body":{"index.html":{}}}],["type",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":458,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":477,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":597,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":666,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":774,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":516,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":866,"title":{},"body":{"index.html":{}}}],["typo",{"_index":629,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":530,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@isstring({each",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":536,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":880,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":465,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":979,"title":{},"body":{"properties.html":{}}}],["until",{"_index":761,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":503,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["update'})@isint()@isnotempty",{"_index":498,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":447,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":455,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":553,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":589,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":568,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":512,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":500,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["uppercase",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["used",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["usefactory",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":510,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user",{"_index":75,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":517,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:27",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:50",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:75",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":773,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":567,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":697,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":771,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/:id",{"_index":702,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/user.entity",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":684,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":781,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":155,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":604,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":618,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["valid",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["validaiotn",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validaiton",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":365,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["validated",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validates",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validation",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["validationpipe",{"_index":714,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["value1",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["value2",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["value3",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["values",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["varchar",{"_index":523,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["version",{"_index":977,"title":{},"body":{"properties.html":{}}}],["via",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["video",{"_index":931,"title":{},"body":{"index.html":{}}}],["visit",{"_index":920,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":934,"title":{},"body":{"index.html":{}}}],["void",{"_index":573,"title":{},"body":{"controllers/PostsController.html":{}}}],["watch",{"_index":874,"title":{},"body":{"index.html":{}}}],["way",{"_index":759,"title":{},"body":{"controllers/UsersController.html":{}}}],["website",{"_index":966,"title":{},"body":{"index.html":{}}}],["whether",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":753,"title":{},"body":{"controllers/UsersController.html":{}}}],["working",{"_index":919,"title":{},"body":{"index.html":{}}}],["x",{"_index":945,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":959,"title":{},"body":{"index.html":{}}}],["you're",{"_index":885,"title":{},"body":{"index.html":{}}}],["z0",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The main application controller.\n\nThis class handles incoming HTTP requests and delegates execution to the corresponding service methods.\nDecorated with @Controller() to indicate it is a controller in the NestJS framework.\n\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * The main application controller.\n * - This class handles incoming HTTP requests and delegates execution to the corresponding service methods.\n * - Decorated with `@Controller()` to indicate it is a controller in the NestJS framework.\n */\n@Controller()\nexport class AppController {\n  /**\n   * Constructor for `AppController`.\n   * - The `AppService` is injected via dependency injection to handle business logic.\n   * @param appService - An instance of `AppService` that contains the business logic.\n   */\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n/**\n * Users Created Modules\n */\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { User } from './users/user.entity';\n// import { Post } from './posts/post.entity';\n// import { Tag } from './tags/tag.entity';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsModule } from './tags/tags.module';\nimport { User } from './users/user.entity';\nimport { Tag } from './tags/tag.entity';\nimport { MetaOption } from './meta-options/meta-option.entity';\nimport { Post } from './posts/post.entity';\n// import { MetaOption } from './meta-options/meta-option.entity';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        entities: [User, Post, Tag, MetaOption],\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'root',\n        host: 'localhost',\n        database: 'nestjs-blog',\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService is a basic service that handles business logic for the application.\nIt provides a simple method to return a greeting message.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n                        AppService is a basic service that handles business logic for the application.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A greeting message that says \"Hello From Ramya!\"\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * AppService is a basic service that handles business logic for the application.\n * It provides a simple method to return a greeting message.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * AppService is a basic service that handles business logic for the application.\n   * @returns A greeting message that says \"Hello From Ramya!\"\n   */\n  getHello(): string {\n    return 'Hello From Ramya!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller that handles authentication-related endpoints.\nThis controller exposes routes for user authentication, such as login and status checks.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n/**\n * Controller that handles authentication-related endpoints.\n *\n * This controller exposes routes for user authentication, such as login and status checks.\n */\n@Controller('auth')\nexport class AuthController {\n  /**\n   * @param authService The injected `AuthService` used for handling the authentication logic.\n   */\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for authentication-related operations.\nThis service handles operations such as logging in and checking authentication status.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            The forwardRef and Inject decorators are used to resolve circular dependency issues between AuthService and UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected UsersService which is used to interact with the user data.\nThe forwardRef and Inject decorators are used to resolve circular dependency issues between AuthService and UsersService.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Simulates checking if a user is authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean indicating whether the user is authenticated. (Currently always returns true, will be updated with actual logic).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Simulates a login process and generates a token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User's email address.\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User's password.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A token (for now, it returns a placeholder string).\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service responsible for authentication-related operations.\n *\n * This service handles operations such as logging in and checking authentication status.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * @param userService The injected `UsersService` which is used to interact with the user data.\n   * The `forwardRef` and `Inject` decorators are used to resolve circular dependency issues between `AuthService` and `UsersService`.\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly userService: UsersService,\n  ) {}\n\n  /**\n   * Simulates a login process and generates a token.\n   *\n   * @param email User's email address.\n   * @param password User's password.\n   * @returns A token (for now, it returns a placeholder string).\n   */\n  public login(email: string, password: string) {\n    const user = this.userService.findOneById('1234');\n    return 'token';\n  }\n\n  /**\n   * Simulates checking if a user is authenticated.\n   *\n   * @returns A boolean indicating whether the user is authenticated. (Currently always returns true, will be updated with actual logic).\n   */\n  public isAuth() {\n    return true; // this will be replaced with actual logic to check authentication\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dots/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for creating a new blog post.\nThis class defines the structure and validation rules for the data\nrequired to create a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the blog post', example: 'This is the content of my first post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:104\n                        \n                    \n\n            \n                \n                    The content of the blog post (optional).\n\nMust be a string if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image url of the blog post', example: 'https://example.com/featured-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:132\n                        \n                    \n\n            \n                \n                    The featured image URL of the blog post (optional).\n\nMust be a valid URL if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:190\n                        \n                    \n\n            \n                \n                    Metadata options for the blog post (optional).\n\nMust be an array of objects, each with key and value properties.\nEach object is validated against the CreatePostMetaOptionsDto class.\n\nExample :  { key: 'option1', value: 'value1' },\n  { key: 'option2', value: 'value2' },\n  { key: 'option3', value: 'value3' }\n]\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'it can be post, story, page, series'})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:56\n                        \n                    \n\n            \n                \n                    The type of the post.\n\nMust be one of the enum values: post, story, page, or series.\nCannot be empty.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the date in ISO8601 when the blog post was published', example: '2022-01-01T12:00:00Z'})@IsOptional()@IsISO8601()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:145\n                        \n                    \n\n            \n                \n                    The ISO8601 date when the blog post was published (optional).\n\nMust be a valid ISO8601 date string if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the schema of the blog post', example: '{\n \"@context\": \"https:V/schema.org\", \n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:118\n                        \n                    \n\n            \n                \n                    The schema of the blog post (optional).\n\nMust be valid JSON if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the slug of the blog post', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.'})@MaxLength(256)@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:77\n                        \n                    \n\n            \n                \n                    The slug of the blog post.\n\nMust be a string.\nCannot be empty.\nMust match the specified regex for valid slugs.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Status, description: 'draft, schedule, review, published'})@IsEnum(Status)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:91\n                        \n                    \n\n            \n                \n                    The status of the blog post.\n\nMust be one of the enum values: draft, schedule, review, or published.\nCannot be empty.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values ', example: undefined})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Tags for the blog post (optional).\n\nMust be an array of strings if provided.\nEach string must have a minimum length of 3 characters.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title of the blog post', example: 'My First Post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:42\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\nMust be a string.\nCannot be empty.\nMust have a minimum length of 4 characters.\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  //   IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/postType.enum';\nimport { Status } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-metaoptions.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n/**\n * DTO (Data Transfer Object) for creating a new blog post.\n * This class defines the structure and validation rules for the data\n * required to create a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must have a minimum length of 4 characters.\n   * @example 'My First Post'\n   */\n  @ApiProperty({\n    description: 'This is the title of the blog post',\n    example: 'My First Post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(512)\n  title: string;\n\n  /**\n   * The type of the post.\n   * - Must be one of the enum values: `post`, `story`, `page`, or `series`.\n   * - Cannot be empty.\n   * @example 'post'\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: 'it can be post, story, page, series',\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * The slug of the blog post.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must match the specified regex for valid slugs.\n   * @example 'my-first-post'\n   */\n  @ApiProperty({\n    description: 'This is the slug of the blog post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.',\n  })\n  @MaxLength(256)\n  @MinLength(3)\n  slug: string;\n\n  /**\n   * The status of the blog post.\n   * - Must be one of the enum values: `draft`, `schedule`, `review`, or `published`.\n   * - Cannot be empty.\n   * @example 'draft'\n   */\n  @ApiProperty({\n    enum: Status,\n    description: 'draft, schedule, review, published',\n  })\n  @IsEnum(Status)\n  @IsNotEmpty()\n  status: Status;\n\n  /**\n   * The content of the blog post (optional).\n   * - Must be a string if provided.\n   * @example 'This is the content of my first post.'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the content of the blog post',\n    example: 'This is the content of my first post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * The schema of the blog post (optional).\n   * - Must be valid JSON if provided.\n   * @example '{ \"@context\": \"https://schema.org\", \"@type\": \"Person\" }'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the schema of the blog post',\n    example:\n      '{\\r\\n \"@context\": \"https:V\\/schema.org\", \\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The featured image URL of the blog post (optional).\n   * - Must be a valid URL if provided.\n   * @example 'https://example.com/featured-image.jpg'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the featured image url of the blog post',\n    example: 'https://example.com/featured-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  /**\n   * The ISO8601 date when the blog post was published (optional).\n   * - Must be a valid ISO8601 date string if provided.\n   * @example '2022-01-01T12:00:00Z'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the date in ISO8601 when the blog post was published',\n    example: '2022-01-01T12:00:00Z',\n  })\n  @IsOptional()\n  @IsISO8601()\n  publishedOn?: Date;\n\n  /**\n   * Tags for the blog post (optional).\n   * - Must be an array of strings if provided.\n   * - Each string must have a minimum length of 3 characters.\n   * @example ['tag1', 'tag2', 'tag3']\n   */\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values ',\n    example: ['tag1', 'tag2', 'tag3'],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true }) // each value of the array is string\n  @MinLength(3, { each: true }) //each value of this array should be greater than 3\n  tags?: string[];\n\n  /**\n   * Metadata options for the blog post (optional).\n   * - Must be an array of objects, each with `key` and `value` properties.\n   * - Each object is validated against the `CreatePostMetaOptionsDto` class.\n   * @example [\n   *   { key: 'option1', value: 'value1' },\n   *   { key: 'option2', value: 'value2' },\n   *   { key: 'option3', value: 'value3' }\n   * ]\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'This is type of json string',\n          example: '{\"sidebarEnabled\" : true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true }) // each value of the array is included for validaiotn\n  @Type(() => CreatePostMetaOptionsDto) // use class-transformer to transform the object to CreatePostMetaOptionsDtor for validaiton\n  metaOptions?: CreatePostMetaOptionsDto | null; // Array of objects with key-value pairs\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-metaoptions.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for defining meta options of a blog post.\nThis class is used to validate the structure and values of each meta option object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-metaoptions.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n/**\n * DTO (Data Transfer Object) for defining meta options of a blog post.\n * This class is used to validate the structure and values of each meta option object.\n */\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagsDto.html":{"url":"classes/CreateTagsDto.html","title":"class - CreateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tags.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the slug of the blog post', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.'})@MaxLength(256)@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagsDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the slug of the blog post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.',\n  })\n  @MaxLength(256)\n  @MinLength(3)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for creating a new user.\nThis class validates the structure and properties of a user creation request.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:50\n                        \n                    \n\n            \n                \n                    The email address of the user.\n\nMust be a valid email format.\nCannot be empty.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n            \n                \n                    The first name of the user.\n\nMust be a string.\nCannot be empty.\nMust be between 3 and 50 characters.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:39\n                        \n                    \n\n            \n                \n                    The last name of the user.\n\nMust be a string.\nOptional field.\nMust not exceed 50 characters if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Minimum 8 chars at least one letter, number and special characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:75\n                        \n                    \n\n            \n                \n                    The password for the user account.\n\nMust be a string.\nCannot be empty.\nMust be at least 8 characters long.\nMust include:\nAt least one uppercase letter.\nAt least one lowercase letter.\nAt least one digit.\nAt least one special character (@$!%*?&).\n\n\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO (Data Transfer Object) for creating a new user.\n * This class validates the structure and properties of a user creation request.\n */\nexport class CreateUserDto {\n  /**\n   * The first name of the user.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must be between 3 and 50 characters.\n   * @example 'John'\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * The last name of the user.\n   * - Must be a string.\n   * - Optional field.\n   * - Must not exceed 50 characters if provided.\n   * @example 'Doe'\n   */\n  @IsString()\n  @IsOptional()\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * The email address of the user.\n   * - Must be a valid email format.\n   * - Cannot be empty.\n   * @example 'john.doe@example.com'\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * The password for the user account.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must be at least 8 characters long.\n   * - Must include:\n   *   - At least one uppercase letter.\n   *   - At least one lowercase letter.\n   *   - At least one digit.\n   *   - At least one special character (@$!%*?&).\n   * @example 'P@ssw0rd123!'\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(\n    /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Minimum 8 chars at least one letter, number and special characters',\n    },\n  )\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for fetching user parameters.\n\nUsed to specify optional parameters when retrieving user data.\nSupports Swagger documentation and validation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with specific id', example: 1})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:26\n                        \n                    \n\n            \n                \n                    Optional user ID for fetching a specific user.\n\nIf provided, the API will return data for the user with the given ID.\nDecorated with validation rules to ensure it's an integer.\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * Data Transfer Object for fetching user parameters.\n * - Used to specify optional parameters when retrieving user data.\n * - Supports Swagger documentation and validation.\n */\nexport class GetUsersParamDto {\n  /**\n   * Optional user ID for fetching a specific user.\n   * - If provided, the API will return data for the user with the given ID.\n   * - Decorated with validation rules to ensure it's an integer.\n   *\n   * @example 1\n   * @description Get user with a specific ID.\n   */\n  @ApiPropertyOptional({\n    description: 'Get user with specific id',\n    example: 1,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                createPostMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createPostMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPostMetaOptions(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './providers/meta-option.service';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-metaoptions.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  public async createPostMetaOptions(\n    @Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.createPostMetaOptions(\n      createPostMetaOptionsDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-option.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-option.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPostMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-option.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPostMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPostMetaOptions(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-option.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-metaoptions.dto';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n  ) {}\n  public createPostMetaOptions(\n    createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    const metaOption = this.metaOptionsRepository.create(\n      createPostMetaOptionsDto,\n    );\n    return this.metaOptionsRepository.save(metaOption); // Saving the created meta option to the database.\n    // Implementation for creating post meta options\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dots/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Dto for patch post input data mapping type of the create post dto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the blog post to update'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/patch-post.dto.ts:17\n                        \n                    \n\n            \n                \n                    Id of the post for updating the post\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * Dto for patch post input data mapping type of the create post dto\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * Id of the post for updating the post\n   */\n  @ApiProperty({\n    description: 'The id of the blog post to update',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for patching/updating user data.\nThis class extends PartialType(CreateUserDto) to inherit all properties from CreateUserDto,\nbut makes all properties optional. This is useful for handling partial updates where not all fields need to be provided.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for patching/updating user data.\n *\n * This class extends `PartialType(CreateUserDto)` to inherit all properties from `CreateUserDto`,\n * but makes all properties optional. This is useful for handling partial updates where not all fields need to be provided.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  // the partial type is a mapped type which helps this dto to get the all properties of CreateUserDto\n  // yet it makes all the properties of CreateUserDto optional\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined)@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Status, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/postType.enum';\nimport { Status } from './enums/postStatus.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: Status,\n    default: Status.DRAFT,\n    nullable: false,\n  })\n  status: Status;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishedOn?: Date;\n\n  @OneToOne(() => MetaOption)\n  @JoinColumn()\n  metaOptions?: MetaOption;\n\n  // @Column('simple-array')\n  tags?: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Post controller for managin posts business operations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: 201, description: 'Your post has been created successfully', type: CreatePostDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n                        This is for creating post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                createPostDto\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string | undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        Method to get posts of a speciif user or randomly all\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                        string | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'Your post has been updated successfully', type: PatchPostDto})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        update a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dots/create-post.dto';\nimport { PatchPostDto } from './dots/patch-post.dto';\n/**\n * Post controller for managin posts business operations\n * @controller\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Constructor\n   * @param postsService\n   */\n  constructor(private readonly postsService: PostsService) {}\n  /**\n   * Method to get posts of a speciif user or randomly all\n   */\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string | undefined) {\n    return this.postsService.findAll(userId);\n  }\n\n  /**\n   * This is for creating post\n   * @param createPostDto\n   * @returns createPostDto\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Your post has been created successfully',\n    type: CreatePostDto,\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n    return this.postsService.createPost();\n  }\n\n  /**\n   * update a post\n   * @param patchPostDto\n   */\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Your post has been updated successfully',\n    type: PatchPostDto,\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nMetaOption\n\nMetaOption\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOption->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetaOption\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule, TypeOrmModule.forFeature([Post]), MetaOption], //we can only import modules but the things imported with the modules are explicitly exported by the module\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing posts.\n\nProvides methods for retrieving and creating posts.\nUses dependency injection to interact with the UsersService.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for PostsService.\n\nInjects the UsersService to allow interaction with user data.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling user-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\nSimulates the creation of a post.\n\nExample :createPost(); // \"Post created successfully\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A success message indicating the post was created.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a given user.\n\nFetches user data using the UsersService.\nConstructs a list of posts associated with the user.\n\nExample :findAll('12345');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user for whom posts are to be fetched.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                An array of posts, each containing the user, title, and content.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { Post } from '../post.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from '../dots/create-post.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\n\n/**\n * Service responsible for managing posts.\n * - Provides methods for retrieving and creating posts.\n * - Uses dependency injection to interact with the `UsersService`.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor for `PostsService`.\n   * - Injects the `UsersService` to allow interaction with user data.\n   * @param usersService - Service for handling user-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService, // dependency injection is used to inject services into controllers and other components.\n    @InjectRepository(Post)\n    private postsRepository: Repository, // Corrected the typo here\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository, // Corrected the typo here\n  ) {}\n\n  /**\n   * Retrieves all posts for a given user.\n   * - Fetches user data using the `UsersService`.\n   * - Constructs a list of posts associated with the user.\n   * @param userId - The ID of the user for whom posts are to be fetched.\n   * @returns An array of posts, each containing the user, title, and content.\n   * @example\n   * findAll('12345');\n   */\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    // user service\n    return [\n      {\n        id: 1,\n        user: user,\n        title: 'Post 1',\n        content: 'Content of post 1',\n      },\n      {\n        id: 2,\n        user: user,\n        title: 'Post 2',\n        content: 'Content of post 2',\n      },\n    ];\n  }\n\n  /**\n   * Creates a new post.\n   * - Simulates the creation of a post.\n   * @returns A success message indicating the post was created.\n   * @example\n   * createPost(); // \"Post created successfully\"\n   */\n  async public createPost(@Body() createPostDto: CreatePostDto) {\n    // create metaoptions\n    let metaOptions = createPostDto.metaOptions\n      ? this.metaOptionsRepository.create(createPostDto.metaOptions)\n      : null;\n\n    if (metaOptions) {\n      await this.metaOptionsRepository.save(metaOptions);\n    }\n    // create post\n\n    // add metaoptions to the post\n\n    // return posts to the user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n    nullable: false,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn() //this decorator set entire entity [table] allows to soft delete things\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('tags')\n@ApiTags('Tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [],\n  imports: [TypeOrmModule.forFeature([Tag])],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagsService.html":{"url":"classes/TagsService.html","title":"class - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { Repository } from 'typeorm';\n\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag)\n    private tagRepository: Repository,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastnName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastnName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  //   @PrimaryColumn() //don't generate id automatically\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastnName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing user-related operations.\n\nHandles incoming HTTP requests for user data.\nImplements routes for retrieving, creating, and updating users.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:109\n                        \n                    \n\n\n            \n                \n                        POST /users - Creates a new user.\n\nAccepts user data via CreateUserDto.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object for creating a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Confirmation message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches the users'})@ApiResponse({status: 200, description: 'User fetched succesfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Limit the number of results', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Number of current page', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:88\n                        \n                    \n\n\n            \n                \n                        GET /users/:id? - Fetches users with optional ID and query parameters.\n\nSupports pagination using limit and page query parameters.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptional DTO for user ID parameter.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nLimit the number of results (default: 10).\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent page number (default: 1).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                List of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        PATCH /users - Updates an existing user.\n\nAccepts partial user data via PatchUserDto.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object for patching a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                Updated user data.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  // Headers,\n  // Ip,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n  // ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n// import { Req } from '@nestjs/common';\n// import {Request} from 'express';\n\n/**\n * Controller for managing user-related operations.\n * - Handles incoming HTTP requests for user data.\n * - Implements routes for retrieving, creating, and updating users.\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Dependency Injection of UsersService.\n   * @param usersService - Provides methods to interact with user data.\n   */\n  constructor(\n    //injecting userService dependency\n    private readonly usersService: UsersService,\n  ) {}\n\n  // Approach 1 to get the params\n  //   @Get('/:id') ///:id?->will make it not required // this is the decorator for handling GET requests\n  //   public getUsers(@Param() params: any, @Query() query: any) {\n  //     console.log(params);\n  //     console.log(query);\n  //     return 'You have sent a get request to users endpoint';\n  //   }\n\n  //   @Get('/:id/:optional?')\n  //   public getUsers(@Param('id') id: any, @Query('limit') limit: any) {\n  //     console.log(id);\n  //     console.log(limit);\n  //     return 'You have sent a get request to users endpoint';\n  //   }\n\n  //used pipe\n\n  /**\n   * GET /users/:id? - Fetches users with optional ID and query parameters.\n   * - Supports pagination using `limit` and `page` query parameters.\n   *\n   * @param getUsersParamDto - Optional DTO for user ID parameter.\n   * @param limit - Limit the number of results (default: 10).\n   * @param page - Current page number (default: 1).\n   * @returns List of users.\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches the users',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User fetched succesfully',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Limit the number of results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Number of current page',\n    example: 1,\n  })\n  public getUsers(\n    // commented because we can't use dto with single key extracted\n    // @Param('id', ParseIntPipe) id: number | undefined,\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n    // console.log(getUsersParamDto);\n    // console.log(limit);\n    // console.log(page);\n  }\n\n  /**\n   * POST /users - Creates a new user.\n   * - Accepts user data via `CreateUserDto`.\n   *\n   * @param createUserDto - Data Transfer Object for creating a user.\n   * @returns Confirmation message.\n   */\n  @Post() // this is the decorator handling POST requests\n  public createUser(\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto, //here we can use our dto class to\n    @Body() createUserDto: CreateUserDto, //here we can use our dto class to without using validaiton PIPE because imported into the main.ts\n    // @Headers() headers: any,\n    // @Ip() ip: any,\n  ) {\n    return this.usersService.createUser(createUserDto);\n    // console.log(headers);\n    // console.log(ip);\n    // return 'You have sent a post request to users endpoint';\n  }\n\n  // in below way we can use the express request object to get the body params but its not good way until its necessary\n  // @Post() // this is the decorator handling POST requests\n  // public createUser(@Req() request: Request) {\n  // console.log(request);\n  // return 'You have sent a post request to users endpoint';\n  // }\n\n  // started with the patch request\n  /**\n   * PATCH /users - Updates an existing user.\n   * - Accepts partial user data via `PatchUserDto`.\n   *\n   * @param patchUserDto - Data Transfer Object for patching a user.\n   * @returns Updated user data.\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n})\nexport class UsersModule {}\n\n// providers are only available to export\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for the user service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Method for creating a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:46\n                        \n                    \n\n\n            \n                \n                         This method is for call the all users from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Find a single user using id from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; firstName: string; email: string; }\n\n                        \n                            \n                                object {}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n/**\n * Class to connect users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the user service\n   * @param authService\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private usersRepository: Repository, // Corrected the typo here\n  ) {}\n\n  /**\n   * Method for creating a new user\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    // check if the user already exists email\n    const ExistingUser = await this.usersRepository.findOne({\n      where: {\n        email: createUserDto.email,\n      },\n    });\n    // handle exception\n\n    //create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n    newUser = await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  /**\n   *  This method is for call the all users from the database\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    // const isAuth = this.authService.isAuth();\n    // console.log(isAuth);\n    console.log(getUsersParamDto, limit, page);\n    return [\n      {\n        firstName: 'ramya',\n        email: 'ramya@gmail.com',\n      },\n      {\n        firstName: 'ramesh',\n        email: 'ramesh@gmail.com',\n      },\n      {\n        firstName: 'raja',\n        email: 'raja@gmail.com',\n      },\n    ];\n  }\n\n  /**\n   * Find a single user using id from the database\n   * @param id\n   * @returns object {}\n   */\n  public findOneById(id: string) {\n    return {\n      id: id,\n      firstName: 'ramya',\n      email: 'ramya@gmail.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-metaoptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-option.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dots/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/posts/dots/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tags.dto.ts\n            \n            class\n            CreateTagsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            class\n            TagsService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                        \n                            Status   (src/.../postStatus.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Boostrap functino for the app\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nMetaOption\n\nMetaOption\n\nPostsModule -->\n\nMetaOption->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
