var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.28,1,2.406]],["body/controllers/AppController.html",[0,2.509,1,4.13,2,1.479,3,0.284,4,0.251,5,0.251,6,3.691,7,0.984,8,5.514,9,4.157,10,0.118,11,3.434,12,4.696,13,4.696,14,4.696,15,5.514,16,5.514,17,5.514,18,3.434,19,1.997,20,4.696,21,5.514,22,4.696,23,4.696,24,0.405,25,0.023,26,0.927,27,3.869,28,3.691,29,0.284,30,1.885,31,3.267,32,3.691,33,2.951,34,3.267,35,3.691,36,3.755,37,3.755,38,2.309,39,3.691,40,4.333,41,2.489,42,1.771,43,0.017,44,0.017]],["title/modules/AppModule.html",[45,1.138,46,2.406]],["body/modules/AppModule.html",[1,3.385,2,1.448,3,0.193,4,0.17,5,0.17,10,0.057,24,0.519,25,0.023,26,0.63,27,3.448,28,2.507,29,0.193,43,0.013,44,0.013,45,1.601,46,4.746,47,1.845,48,1.281,49,1.461,50,1.461,51,1.281,52,2.467,53,1.461,54,2.507,55,2.507,56,2.507,57,3.448,58,3.448,59,3.448,60,3.739,61,3.448,62,3.198,63,2.105,64,1.461,65,1.366,66,2.22,67,2.648,68,2.944,69,1.691,70,1.691,71,2.944,72,2.944,73,2.944,74,1.834,75,1.281,76,1.425,77,4.241,78,1.197,79,4.241,80,2.467,81,4.241,82,2.307,83,2.467,84,2.507,85,2.944,86,3.612,87,5.438,88,2.005,89,4.241,90,2.944,91,4.241,92,2.944,93,4.241,94,2.944,95,2.307,96,2.435,97,2.944,98,1.568,99,3.748,100,2.507,101,2.944,102,2.944,103,1.281,104,2.944,105,2.944,106,2.944,107,2.944,108,2.944,109,1.834,110,2.944,111,0.428,112,2.944,113,1.568,114,2.944,115,2.944,116,2.944,117,2.944,118,2.944,119,2.944,120,2.944,121,2.944,122,2.944,123,2.944,124,2.005,125,2.944,126,2.944,127,2.944,128,1.834,129,2.944]],["title/injectables/AppService.html",[27,2.029,130,1.138]],["body/injectables/AppService.html",[3,0.284,4,0.251,5,0.251,7,0.984,9,4.813,10,0.084,11,3.976,18,3.976,19,1.997,24,0.318,25,0.023,26,0.927,27,3.869,29,0.284,36,4.347,37,4.347,43,0.017,44,0.017,130,1.776,131,2.151,132,3.691,133,6.383,134,4.157,135,4.696,136,4.157,137,2.196,138,6.383,139,3.666,140,0.544,141,6.383,142,0.769,143,4.333,144,2.12,145,1.997,146,6.064,147,6.064]],["title/controllers/AuthController.html",[0,1.28,148,2.406]],["body/controllers/AuthController.html",[0,2.423,2,1.556,3,0.299,4,0.264,5,0.264,7,1.035,10,0.089,11,3.545,24,0.418,25,0.023,26,0.975,29,0.299,31,3.437,37,3.104,38,2.428,41,2.618,42,1.863,43,0.018,44,0.018,76,1.633,148,3.877,149,3.882,150,2.839,151,4.558,152,5.699,153,3.877,154,5.692,155,5.692,156,4.848,157,4.848,158,4.848,159,2.477,160,5.692,161,3.565,162,3.882,163,4.558,164,2.618,165,3.104]],["title/modules/AuthModule.html",[45,1.138,57,2.029]],["body/modules/AuthModule.html",[2,1.933,3,0.296,4,0.262,5,0.262,10,0.088,24,0.476,25,0.023,26,0.967,29,0.296,43,0.018,44,0.018,45,1.991,47,1.967,48,1.967,49,2.244,50,2.244,51,1.967,52,3.07,53,3.07,57,3.969,62,3.017,63,2.811,64,2.244,65,2.098,67,2.409,148,4.212,161,3.822,162,3.85,166,3.85,167,3.85,168,3.85,169,4.521,170,3.857,171,4.521,172,3.85]],["title/injectables/AuthService.html",[130,1.138,161,1.882]],["body/injectables/AuthService.html",[3,0.194,4,0.171,5,0.171,7,1.131,10,0.057,11,2.648,18,3.392,19,1.54,24,0.312,25,0.023,26,0.632,29,0.194,30,1.85,31,3.206,33,3.392,37,3.392,38,2.653,42,1.207,43,0.013,44,0.013,76,1.776,98,1.574,103,2.167,109,3.392,111,0.617,124,4.094,130,1.369,131,1.467,137,1.54,140,0.371,142,0.884,144,2.437,145,2.295,152,4.916,153,2.895,157,3.621,158,4.639,159,1.85,161,3.075,164,3.315,170,3.71,173,2.516,174,3.621,175,3.128,176,4.251,177,5.447,178,2.456,179,5.447,180,2.954,181,3.253,182,2.954,183,1.348,184,4.98,185,4.98,186,4.98,187,4.242,188,1.635,189,1.451,190,1.024,191,4.242,192,2.895,193,1.635,194,2.954,195,4.639,196,5.447,197,4.98,198,3.621,199,4.251,200,4.251,201,4.251,202,2.895,203,4.98,204,4.251,205,2.954,206,3.206,207,4.251,208,5.772,209,3.71,210,5.447,211,3.621,212,2.516,213,4.251,214,4.251,215,2.516,216,2.516,217,1.574,218,2.954,219,2.954,220,2.012]],["title/classes/CreateManyUsersDto.html",[10,0.069,221,2.029]],["body/classes/CreateManyUsersDto.html",[3,0.281,4,0.248,5,0.248,7,1.244,10,0.124,24,0.467,25,0.023,29,0.281,43,0.017,44,0.017,69,3.773,76,1.571,103,2.626,111,0.954,140,0.538,142,0.761,183,1.161,221,3.146,222,1.553,223,4.13,224,3.96,225,3.653,226,1.483,227,3.388,228,3.653,229,4.13,230,4.13,231,3.731,232,4.13,233,4.289,234,3.653,235,4.289,236,4.665,237,3.146,238,4.665,239,1.753,240,2.921,241,1.649,242,2.921,243,3.731,244,1.753,245,2.921,246,3.653,247,4.289,248,2.285]],["title/classes/CreatePostDto.html",[10,0.069,249,2.029]],["body/classes/CreatePostDto.html",[3,0.09,4,0.079,5,0.079,7,1.276,10,0.094,24,0.317,25,0.023,29,0.09,43,0.007,44,0.007,78,1.668,82,0.636,103,1.879,111,0.919,139,1.333,140,0.172,142,0.953,145,2.293,159,2.269,183,1.453,190,1.536,193,1.366,222,0.496,226,1.076,228,1.167,229,3.648,230,3.256,232,1.75,234,1.167,236,1.977,237,2.48,238,1.977,239,0.56,240,1.581,241,0.892,243,2.941,244,0.56,245,3.433,246,1.167,248,2.578,249,1.333,250,4.685,251,1.033,252,1.152,253,1.445,254,1.236,255,1.649,256,4.165,257,2.321,258,1.75,259,1.977,260,1.977,261,3.019,262,3.933,263,2.056,264,1.88,265,3.648,266,2.571,267,3.133,268,3.139,269,2.895,270,3.469,271,1.019,272,1.977,273,3.597,274,1.37,275,1.37,276,3.386,277,2.895,278,1.37,279,1.37,280,3.552,281,3.553,282,3.553,283,3.678,284,3.019,285,1.37,286,1.37,287,4.121,288,2.48,289,1.977,290,1.37,291,1.333,292,1.37,293,1.37,294,1.977,295,1.445,296,3.019,297,3.139,298,3.552,299,2.321,300,2.321,301,2.321,302,2.321,303,2.321,304,2.321,305,2.321,306,2.321,307,2.321,308,3.026,309,1.893,310,1.37,311,1.37,312,2.679,313,3.678,314,2.679,315,2.571,316,4.121,317,2.779,318,3.918,319,2.321,320,2.321,321,1.37,322,1.37,323,3.553,324,3.019,325,1.37,326,2.321,327,1.37,328,1.37,329,3.026,330,1.75,331,1.167,332,3.026,333,3.026,334,1.977,335,1.75,336,1.977,337,3.256,338,1.977,339,1.581,340,1.75,341,1.167,342,1.37,343,2.321,344,2.321,345,2.321,346,2.321,347,3.386,348,3.553,349,3.026,350,1.37,351,1.37,352,2.321,353,2.321,354,1.37,355,1.37,356,2.321,357,3.026,358,2.42,359,2.571,360,1.37,361,1.37,362,2.571,363,1.033,364,1.37,365,2.276,366,2.321,367,1.75,368,2.451,369,2.679,370,1.977,371,1.033,372,1.033,373,1.033,374,1.167,375,1.167,376,1.033,377,1.033,378,3.469,379,1.37,380,1.37,381,1.37,382,1.167,383,1.167,384,1.167,385,1.033,386,1.37,387,1.37,388,2.321,389,1.37,390,1.37,391,2.321,392,1.167,393,1.37,394,1.37,395,1.37,396,1.37,397,1.37,398,1.37,399,1.37,400,1.333,401,1.37,402,1.37,403,1.033,404,1.37,405,1.37,406,1.37,407,0.933,408,1.37,409,1.167,410,1.37]],["title/classes/CreatePostMetaOptionsDto.html",[10,0.069,288,2.029]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.292,4,0.258,5,0.258,7,1.013,10,0.125,24,0.327,25,0.022,29,0.292,43,0.017,44,0.017,78,1.554,82,2.994,111,0.648,140,0.56,142,0.792,145,2.034,164,3.225,183,1.207,193,2.159,222,1.615,226,1.52,237,3.225,239,1.823,245,3.825,248,3.437,252,2.788,253,3.497,256,3.497,258,4.234,288,3.225,295,3.497,314,4.234,367,4.234,376,4.234,403,4.634,411,2.606,412,3.799,413,5.616,414,5.616,415,4.234,416,4.46,417,4.46]],["title/classes/CreateTagsDto.html",[10,0.069,418,2.201]],["body/classes/CreateTagsDto.html",[3,0.237,4,0.209,5,0.209,7,1.35,10,0.095,24,0.359,25,0.022,29,0.237,43,0.015,44,0.015,78,1.336,111,0.902,139,2.81,140,0.453,142,1.103,145,2.473,183,1.682,189,1.894,190,1.543,222,1.308,226,1.324,237,3.186,239,1.476,243,3.778,244,1.476,256,3.047,263,3.778,267,3.778,268,4.08,273,2.606,277,2.81,330,2.724,331,3.076,332,5.064,333,5.064,334,4.167,335,3.689,336,4.167,337,3.689,338,4.167,339,3.332,340,3.689,341,3.076,367,3.689,368,3.168,369,4.483,370,4.167,371,2.724,372,2.724,373,2.724,378,4.483,382,3.076,383,3.076,384,4.167,385,3.689,392,3.076,418,3.047,419,5.456,420,3.076,421,3.612,422,3.612,423,3.612,424,3.612,425,3.612,426,3.612,427,3.612,428,3.612,429,3.612]],["title/classes/CreateUserDto.html",[10,0.069,227,1.882]],["body/classes/CreateUserDto.html",[3,0.185,4,0.163,5,0.163,7,0.64,10,0.104,24,0.207,25,0.023,29,0.185,43,0.013,44,0.013,76,1.906,111,0.774,124,3.859,139,2.361,140,0.354,142,0.946,145,2.449,183,1.443,187,3.501,189,1.82,190,1.284,193,1.58,209,4.159,211,3.501,222,1.021,223,4.272,226,1.443,227,2.19,237,3.061,239,1.152,248,2.19,252,2.04,253,2.56,254,2.19,255,1.908,258,3.099,271,1.179,273,3.334,277,2.361,280,2.799,287,3.501,312,4.889,316,5.038,335,3.099,337,4.719,357,3.501,359,3.501,368,2.19,369,4.019,371,3.099,372,2.126,373,2.126,385,2.126,430,2.126,431,4.11,432,3.501,433,2.56,434,4.131,435,4.131,436,2.82,437,2.82,438,4.11,439,2.82,440,2.82,441,4.539,442,2.82,443,2.82,444,3.099,445,4.11,446,4.11,447,2.82,448,4.11,449,4.11,450,4.11,451,4.11,452,5.33,453,4.11,454,5.915,455,5.33,456,2.82,457,4.11,458,4.11,459,4.11,460,4.11,461,4.11,462,4.11,463,4.11,464,2.82,465,5.33,466,2.82,467,2.82,468,2.82,469,2.82]],["title/classes/GetPostsBaseDto.html",[10,0.069,470,2.406]],["body/classes/GetPostsBaseDto.html",[3,0.295,4,0.26,5,0.26,10,0.12,24,0.453,25,0.023,29,0.295,43,0.018,44,0.018,111,0.82,140,0.564,142,1.002,183,1.528,190,1.558,222,1.628,226,1.528,239,1.838,244,1.838,317,3.716,363,4.651,368,3.287,470,4.201,471,4.651,472,3.39,473,5.254,474,5.254,475,5.644,476,4.496,477,4.496,478,4.807,479,3.241,480,3.062,481,3.39,482,2.582,483,3.062,484,3.83,485,3.83,486,3.83]],["title/classes/GetUsersParamDto.html",[10,0.069,487,2.201]],["body/classes/GetUsersParamDto.html",[3,0.241,4,0.213,5,0.213,7,1.271,10,0.109,20,4.216,24,0.411,25,0.023,29,0.241,43,0.015,44,0.015,69,2.843,76,2.009,111,0.813,137,1.793,140,0.461,142,0.652,164,2.843,183,0.995,188,2.303,190,1.551,193,2.476,222,1.331,226,1.34,239,1.502,240,2.503,244,1.502,248,2.637,253,3.083,259,5.101,260,4.216,271,1.605,272,4.216,273,3.191,276,3.131,280,3.371,365,3.733,368,2.637,378,3.733,400,2.843,487,3.083,488,4.216,489,3.131,490,5.989,491,4.95,492,3.733,493,4.216,494,4.95,495,3.733,496,2.634,497,5.324,498,3.676,499,3.676,500,4.216,501,3.733,502,4.216,503,4.95]],["title/entities/MetaOption.html",[95,1.64,504,1.64]],["body/entities/MetaOption.html",[3,0.254,4,0.224,5,0.224,10,0.075,24,0.376,25,0.023,29,0.254,43,0.016,44,0.016,78,1.666,83,3.244,95,2.379,111,0.949,113,2.063,140,0.486,142,1.129,145,1.856,183,1.722,226,1.387,264,2.411,271,1.47,291,2.943,317,3.512,329,4.365,403,4.332,411,3.033,496,2.209,504,2.379,505,3.297,506,4.893,507,4.893,508,4.893,509,3.871,510,3.913,511,3.871,512,2.637,513,3.49,514,3.871,515,3.297,516,4.365,517,4.365,518,3.871,519,3.871,520,4.893,521,3.871,522,2.919,523,3.49,524,4.365,525,4.365,526,1.582,527,2.637,528,3.871,529,3.297,530,3.297,531,3.297,532,3.297]],["title/controllers/MetaOptionsController.html",[0,1.28,533,2.406]],["body/controllers/MetaOptionsController.html",[0,1.602,2,1.511,3,0.29,4,0.256,5,0.256,10,0.086,19,2.023,24,0.449,25,0.023,26,0.946,29,0.29,41,2.541,42,1.808,43,0.017,44,0.017,78,1.549,82,2.054,83,2.774,111,0.643,137,1.602,140,0.555,142,0.785,144,1.701,150,2.756,178,2.503,183,1.198,188,1.701,189,1.511,190,1.066,288,3.95,295,3.48,377,3.337,411,2.593,533,3.805,534,3.769,535,3.517,536,5.216,537,3.769,538,4.425,539,2.756,540,3.209,541,3.517,542,3.769,543,3.769,544,2.357,545,4.425,546,4.425]],["title/modules/MetaOptionsModule.html",[45,1.138,58,2.029]],["body/modules/MetaOptionsModule.html",[2,1.911,3,0.291,4,0.257,5,0.257,10,0.086,24,0.487,25,0.023,26,0.949,29,0.291,43,0.017,44,0.017,45,1.974,47,1.93,48,1.93,49,2.203,50,2.203,51,1.93,52,3.044,53,3.044,58,3.953,63,2.778,64,2.203,65,2.059,67,2.364,74,2.763,75,1.93,82,2.598,83,2.203,95,2.059,96,2.548,411,2.059,533,4.176,541,4.11,542,3.779,543,3.779,547,3.779,548,3.779,549,3.779,550,4.437,551,4.437,552,4.437]],["title/injectables/MetaOptionsService.html",[130,1.138,541,2.029]],["body/injectables/MetaOptionsService.html",[3,0.27,4,0.239,5,0.239,10,0.08,19,1.933,24,0.476,25,0.023,26,0.881,29,0.27,30,2.322,42,1.684,43,0.017,44,0.017,70,2.366,75,1.792,78,1.286,82,2.748,95,2.477,96,2.366,98,2.195,111,0.775,128,2.566,130,1.719,131,2.045,137,1.492,140,0.517,142,0.947,144,1.584,178,2.42,188,2.052,189,1.822,190,1.286,217,2.195,254,2.195,288,3.886,295,2.566,377,3.106,411,2.748,415,3.106,526,1.684,536,5.043,537,3.509,541,3.065,544,2.195,553,5.043,554,3.509,555,4.12,556,3.597,557,4.12,558,4.546,559,4.12,560,2.806,561,3.509,562,4.12,563,4.12,564,3.509,565,4.12]],["title/interfaces/Paginated.html",[566,2.406,567,2.201]],["body/interfaces/Paginated.html",[3,0.302,4,0.267,5,0.267,25,0.022,29,0.302,43,0.018,44,0.018,70,2.646,82,3.029,111,1.018,113,2.455,140,0.578,145,2.364,193,2.581,226,1.551,241,1.772,271,1.872,277,2.646,444,3.475,566,3.138,567,3.569,568,4.608,569,3.925,570,5.559,571,5.559,572,6.527,573,4.608,574,3.925,575,3.925,576,3.925,577,3.925,578,3.925,579,3.925]],["title/modules/PaginationModule.html",[45,1.138,59,2.029]],["body/modules/PaginationModule.html",[3,0.311,4,0.274,5,0.274,10,0.092,24,0.428,25,0.022,26,1.013,29,0.311,43,0.018,44,0.018,45,2.034,47,2.062,48,2.062,49,2.352,50,2.352,51,2.062,52,3.136,53,3.136,59,4.009,63,2.895,64,2.352,65,2.199,67,2.525,580,4.036,581,4.036,582,4.036,583,4.145,584,4.739,585,4.739]],["title/injectables/PaginationProvider.html",[130,1.138,583,2.029]],["body/injectables/PaginationProvider.html",[3,0.203,4,0.179,5,0.179,10,0.06,19,1.592,24,0.448,25,0.023,26,0.662,29,0.203,30,1.913,43,0.017,44,0.014,78,0.746,82,1.437,98,3.419,103,2.224,109,1.929,111,0.742,130,1.416,131,1.537,137,1.121,140,0.389,142,0.78,144,1.191,178,2.089,188,1.966,189,1.501,190,1.059,193,1.191,217,1.65,232,2.335,241,1.191,252,1.537,255,1.437,264,1.929,269,1.778,271,1.261,277,1.778,283,2.637,309,1.65,314,2.335,400,3.196,433,3.997,444,2.335,479,3.196,481,2.335,526,1.266,531,2.637,535,2.936,556,3.607,567,2.738,570,2.637,571,2.637,574,2.637,575,3.745,576,2.637,577,5.006,578,2.637,579,2.637,583,2.525,586,2.637,587,6.106,588,3.097,589,3.097,590,3.097,591,3.097,592,3.745,593,3.097,594,3.097,595,2.637,596,2.335,597,3.097,598,2.637,599,3.097,600,2.738,601,3.097,602,3.745,603,1.929,604,4.397,605,2.637,606,3.097,607,3.097,608,3.097,609,3.097,610,4.397,611,6.28,612,5.565,613,2.637,614,2.637,615,4.397,616,3.097,617,3.097,618,3.097,619,3.097,620,3.097,621,3.097,622,3.097,623,3.097,624,3.097,625,3.097,626,3.097,627,4.397,628,3.097,629,3.097,630,3.097,631,3.097]],["title/classes/PatchPostDto.html",[10,0.069,632,2.201]],["body/classes/PatchPostDto.html",[3,0.28,4,0.247,5,0.247,7,1.24,10,0.106,24,0.442,25,0.023,29,0.28,43,0.017,44,0.017,78,1.694,111,0.874,140,0.536,142,0.757,183,1.155,193,2.099,222,1.545,226,1.478,237,3.136,239,1.744,241,2.315,243,3.718,244,1.744,249,2.45,251,3.217,252,3.151,256,3.4,271,1.566,330,3.217,365,4.117,483,3.718,496,2.623,632,3.4,633,4.65,634,4.117,635,5.46,636,5.46,637,5.46,638,4.267,639,4.267,640,4.65,641,3.634,642,3.217,643,2.906]],["title/classes/PatchUserDto.html",[10,0.069,644,2.406]],["body/classes/PatchUserDto.html",[3,0.287,4,0.254,5,0.254,7,0.994,10,0.119,24,0.407,25,0.023,29,0.287,43,0.017,44,0.017,76,1.592,111,0.806,165,3.78,190,1.468,193,2.134,222,1.586,226,1.829,227,3.523,241,1.683,242,2.982,252,3.025,280,3.78,430,3.302,483,4.364,641,3.729,644,3.78,645,3.729,646,5.55,647,6.408,648,5.55,649,5.19,650,5.55,651,5.19,652,3.78,653,5.55,654,3.78,655,3.729,656,3.729,657,4.379,658,4.379]],["title/entities/Post.html",[78,0.851,504,1.64]],["body/entities/Post.html",[3,0.163,4,0.144,5,0.144,10,0.048,24,0.414,25,0.023,29,0.163,43,0.012,44,0.012,76,1.436,78,0.9,80,2.802,83,1.232,95,2.493,96,1.425,103,2.942,111,0.998,113,1.322,140,0.311,142,1.149,145,2.277,159,2.623,183,1.751,190,1.559,226,1.012,262,3.391,263,3.063,264,3.345,265,4.546,266,3.831,267,3.063,268,2.801,269,2.583,270,3.391,271,1.072,291,3.463,313,5.135,317,2.147,358,3.845,374,2.113,375,2.113,411,1.151,496,1.729,497,2.113,504,1.735,510,3.063,512,4.107,513,4.574,515,2.113,523,4.202,524,2.113,525,3.831,526,1.014,527,3.658,603,3.345,643,1.69,659,2.113,660,2.481,661,3.738,662,5.645,663,2.481,664,4.264,665,2.481,666,4.256,667,3.184,668,2.481,669,2.481,670,3.738,671,2.481,672,3.41,673,2.546,674,2.481,675,3.738,676,2.481,677,2.481,678,3.184,679,2.818,680,2.481,681,2.481,682,2.113,683,3.738,684,2.481,685,2.481,686,3.738,687,2.481,688,3.738,689,3.184,690,3.738,691,2.481,692,2.481,693,2.481,694,2.481,695,2.481,696,3.738]],["title/controllers/PostsController.html",[0,1.28,697,2.406]],["body/controllers/PostsController.html",[0,1.916,2,0.948,3,0.182,4,0.161,5,0.161,7,1.279,10,0.054,19,1.472,24,0.432,25,0.023,26,0.594,29,0.182,30,1.209,36,2.769,38,2.819,41,1.595,42,1.135,43,0.013,44,0.013,70,2.335,76,1.166,78,1.625,111,0.905,136,3.065,137,1.916,140,0.349,142,0.939,144,2.165,145,1.741,150,1.73,159,1.769,175,2.335,178,2.707,183,1.432,188,2.035,189,1.807,190,1.275,202,2.769,231,2.769,244,1.135,249,3.711,254,2.166,255,1.887,256,2.532,271,1.379,482,3.039,496,1.563,540,1.595,632,3.881,634,3.065,642,3.065,643,2.769,652,2.769,697,2.769,698,2.366,699,3.836,700,4.065,701,3.462,702,3.462,703,4.808,704,3.462,705,2.366,706,3.065,707,3.462,708,4.065,709,3.99,710,2.778,711,2.778,712,2.778,713,3.275,714,2.778,715,2.778,716,4.507,717,4.065,718,2.778,719,4.065,720,4.065,721,3.462,722,2.366,723,3.065,724,3.065,725,2.778,726,2.778,727,3.065,728,2.769,729,3.039,730,2.366,731,3.626,732,3.626,733,2.094,734,2.366,735,2.366,736,2.366,737,2.366,738,2.778,739,2.778,740,2.778,741,2.778,742,3.065,743,2.366,744,2.778,745,2.778,746,2.778,747,2.778,748,2.778,749,2.778]],["title/modules/PostsModule.html",[45,1.138,60,2.201]],["body/modules/PostsModule.html",[2,1.742,3,0.252,4,0.223,5,0.223,10,0.075,24,0.511,25,0.023,26,0.822,29,0.252,43,0.016,44,0.016,45,1.964,47,2.491,48,1.673,49,1.909,50,1.909,51,1.673,52,2.842,53,1.909,58,3.746,59,3.746,60,4.414,61,3.746,62,3.475,63,2.533,64,1.909,65,1.785,67,2.718,74,2.395,75,1.673,78,0.926,83,2.533,84,3.275,95,2.368,96,2.208,172,3.275,411,2.368,697,3.899,729,3.746,730,3.275,750,3.275,751,3.845,752,3.275,753,3.845,754,3.845,755,3.275,756,3.845,757,3.845,758,3.845,759,3.275,760,3.275,761,3.845,762,3.845]],["title/injectables/PostsService.html",[130,1.138,729,2.029]],["body/injectables/PostsService.html",[2,0.441,3,0.085,4,0.075,5,0.075,7,1.157,10,0.025,18,2.392,19,1.238,24,0.396,25,0.023,26,0.276,29,0.085,30,1.488,33,1.968,34,2.179,38,1.176,42,1.181,43,0.007,44,0.007,70,1.964,75,0.562,76,1.69,78,1.597,82,1.341,83,0.641,95,0.6,96,0.742,98,1.822,103,0.96,109,0.805,111,0.558,128,2.392,130,0.711,131,0.641,134,1.664,137,1.515,139,1.268,140,0.162,142,0.743,144,1.609,145,1.047,153,1.503,159,0.96,164,0.742,165,1.503,174,1.88,175,1.268,178,2.204,181,2.737,188,1.477,189,1.311,190,0.925,192,1.503,193,1.315,195,1.88,198,1.88,202,0.88,206,3.553,215,1.1,217,2.046,220,1.503,226,0.35,229,1.664,231,1.503,241,1.477,245,1.503,249,2.567,252,0.641,254,1.176,255,2.656,262,1.664,264,3.063,268,1.375,269,3.167,270,1.664,271,0.829,273,1.822,277,0.742,289,1.1,295,1.375,297,0.805,309,0.688,312,2.896,407,0.88,411,0.6,415,0.974,432,2.462,433,2.935,482,1.964,492,1.664,496,1.891,501,1.664,516,1.1,526,0.528,527,1.503,529,1.1,530,1.88,535,3.097,539,1.8,540,0.742,556,2.567,558,2.462,560,0.88,561,1.1,567,0.805,583,2.567,592,1.88,600,3.502,602,1.88,603,2.935,632,2.392,642,1.664,643,1.503,673,2.616,699,3.897,701,2.912,702,1.88,704,1.88,705,1.1,709,1.664,713,1.968,716,2.462,721,2.462,722,1.88,723,0.974,729,1.964,734,1.1,735,1.1,736,1.1,737,1.1,743,1.1,755,1.1,763,1.1,764,1.664,765,2.207,766,2.462,767,1.292,768,2.89,769,2.89,770,1.822,771,1.292,772,2.207,773,2.207,774,2.207,775,1.292,776,2.207,777,2.207,778,1.292,779,2.89,780,1.292,781,1.292,782,2.207,783,1.88,784,3.045,785,2.207,786,1.88,787,2.207,788,2.207,789,1.88,790,2.207,791,1.292,792,1.1,793,2.462,794,1.1,795,3.155,796,1.292,797,1.292,798,1.292,799,1.292,800,1.292,801,1.292,802,1.88,803,1.88,804,1.503,805,1.292,806,0.88,807,1.292,808,1.292,809,1.292,810,1.292,811,1.292,812,1.292,813,1.292,814,3.271,815,4.315,816,2.89,817,1.292,818,3.371,819,4.443,820,4.066,821,3.564,822,2.912,823,3.371,824,3.808,825,3.419,826,3.271,827,1.292,828,1.88,829,1.1,830,1.1,831,3.419,832,1.292,833,1.292,834,2.462,835,2.207,836,3.419,837,2.912,838,1.88,839,2.207,840,1.88,841,1.1,842,1.292,843,2.207,844,1.292,845,2.207,846,2.179,847,1.292,848,1.292,849,1.292,850,2.207,851,1.292,852,1.292,853,1.292,854,1.292,855,1.292,856,1.292,857,1.292,858,1.292,859,1.292,860,2.207,861,1.292,862,1.292,863,1.1,864,1.1,865,1.292,866,1.292,867,1.292,868,1.292,869,1.292,870,2.207,871,1.292,872,1.292,873,2.207,874,1.292,875,2.207,876,1.292,877,2.207,878,1.292,879,2.207,880,1.292,881,2.207,882,1.292,883,2.207,884,1.292,885,2.207,886,1.292,887,1.292,888,1.292,889,1.292]],["title/entities/Tag.html",[80,1.754,504,1.64]],["body/entities/Tag.html",[3,0.202,4,0.178,5,0.178,7,1.157,10,0.06,24,0.321,25,0.023,29,0.202,43,0.014,44,0.014,78,1.337,80,2.174,103,2.877,111,1.003,113,1.641,140,0.387,142,1.174,145,2.395,183,1.79,189,1.74,190,1.468,226,1.185,263,3.471,267,3.471,268,3.174,271,1.256,291,3.188,317,3.5,358,4.151,496,1.96,504,2.366,506,4.341,507,4.341,508,4.341,510,3.471,512,3.994,513,4.503,517,3.73,520,4.341,522,2.322,523,4.151,526,1.259,527,2.983,664,4.728,666,4.595,667,3.73,678,4.728,679,4.186,682,2.623,689,3.73,699,3.994,713,2.097,759,2.623,890,2.623,891,5.097,892,3.08,893,5.097,894,3.08,895,3.08,896,3.08,897,3.08,898,3.08,899,4.379,900,3.08,901,3.08,902,3.08,903,3.08,904,2.623,905,3.08,906,3.08,907,2.322,908,3.08,909,3.08]],["title/controllers/TagsController.html",[0,1.28,910,2.406]],["body/controllers/TagsController.html",[0,1.317,2,1.241,3,0.238,4,0.211,5,0.211,7,1.116,10,0.071,19,1.78,24,0.438,25,0.023,26,0.777,29,0.238,41,2.088,42,1.486,43,0.015,44,0.015,70,2.822,78,1.341,80,2.96,111,0.808,137,2.016,140,0.456,142,0.988,144,2.14,150,2.264,159,1.582,178,2.764,183,1.507,188,2.14,189,1.9,190,1.341,241,1.889,244,1.486,269,2.088,271,1.841,418,3.997,496,2.292,540,2.088,544,1.937,706,2.741,707,3.096,709,2.741,713,4.371,724,3.705,727,4.197,728,2.476,731,3.705,732,3.705,733,2.741,742,2.741,770,2.966,910,3.347,911,3.096,912,4.914,913,4.185,914,4.914,915,3.636,916,3.636,917,3.636,918,3.096,919,3.636,920,3.636,921,4.914,922,3.636,923,3.096,924,3.096,925,3.636,926,3.636,927,3.636,928,3.636,929,3.636,930,3.636,931,3.636,932,3.636,933,3.636]],["title/modules/TagsModule.html",[45,1.138,61,2.029]],["body/modules/TagsModule.html",[2,1.957,3,0.302,4,0.267,5,0.267,10,0.09,24,0.493,25,0.023,26,0.985,29,0.302,43,0.018,44,0.018,45,2.009,47,2.005,48,2.005,49,2.288,50,2.288,51,2.005,52,2.845,53,3.097,61,3.855,63,2.845,64,2.288,65,2.139,67,2.455,74,2.87,75,2.005,80,2.288,770,3.736,910,4.248,924,3.925,934,3.925,935,3.925,936,4.608,937,4.608,938,3.925,939,4.608]],["title/classes/TagsService.html",[10,0.069,770,1.882]],["body/classes/TagsService.html",[3,0.225,4,0.198,5,0.198,10,0.067,19,1.709,24,0.448,25,0.023,26,0.733,29,0.225,30,2.053,43,0.015,44,0.015,75,1.491,80,2.343,98,1.826,103,2.053,111,0.886,137,2.106,140,0.43,142,1.083,144,2.236,178,2.813,188,2.345,189,2.083,190,1.469,217,1.826,222,1.241,269,1.968,271,1.916,418,3.927,496,2.345,526,1.401,535,3.953,539,3.623,540,1.968,544,1.826,556,3.341,560,2.334,600,3.623,770,2.514,864,2.919,913,4.02,918,4.02,923,2.919,938,2.919,940,2.919,941,4.72,942,4.72,943,4.72,944,3.427,945,3.427,946,4.72,947,3.427,948,3.427,949,3.427,950,4.72,951,3.427,952,4.72,953,3.427,954,3.427,955,3.427,956,3.427,957,3.427,958,3.427,959,3.427,960,3.427,961,3.427,962,3.427]],["title/entities/User.html",[76,1.013,504,1.64]],["body/entities/User.html",[3,0.236,4,0.208,5,0.208,10,0.07,24,0.358,25,0.023,29,0.236,43,0.015,44,0.015,76,1.399,78,1.541,103,2.583,111,0.991,113,1.916,124,3.77,140,0.451,142,1.136,145,2.411,183,1.732,209,3.77,226,1.32,271,1.399,291,3.674,358,4.534,434,4.715,435,4.715,496,2.282,504,2.264,510,3.77,512,4.042,513,4.534,522,2.712,523,4.226,526,1.47,666,5.02,679,3.678,699,3.77,963,3.063,964,6.657,965,3.596,966,3.596,967,3.596,968,3.596,969,3.596,970,3.596,971,3.596,972,3.596,973,4.878,974,3.596,975,3.596,976,3.596,977,3.596,978,3.596]],["title/controllers/UsersController.html",[0,1.28,979,2.406]],["body/controllers/UsersController.html",[0,1.233,2,0.553,3,0.106,4,0.094,5,0.094,7,1.258,10,0.085,11,1.662,12,2.273,13,2.273,14,4.001,19,1.233,24,0.395,25,0.023,26,0.571,29,0.106,30,0.705,32,3.362,33,1.818,34,1.221,38,2.766,42,0.662,43,0.015,44,0.008,69,3.614,76,1.874,78,1.397,111,0.754,134,1.221,137,1.948,139,1.533,140,0.203,142,0.701,144,1.91,150,1.009,153,1.818,156,2.273,159,0.705,164,0.93,165,2.689,175,1.533,178,2.487,181,2.168,183,1.069,188,1.996,189,1.604,190,1.25,191,1.38,192,1.103,193,2.271,202,1.818,217,0.863,221,2.698,224,2.12,227,3.147,230,3.292,231,1.818,242,1.818,244,0.662,248,2.326,252,2.466,253,2.459,254,2.103,255,1.832,271,1.821,273,2.103,291,2.267,297,1.009,309,3.147,400,2.267,407,3.2,409,2.273,433,3.451,487,3.233,492,2.013,493,2.273,496,1.91,540,2.267,544,1.422,596,2.013,598,1.38,605,1.38,614,2.273,634,3.543,640,2.273,644,3.868,651,2.273,652,1.818,672,2.689,673,1.103,706,1.221,723,2.013,724,2.013,727,2.977,728,3.383,731,2.013,732,2.013,733,1.221,742,1.221,760,2.273,764,2.013,783,3.362,784,2.689,786,2.273,789,2.273,804,2.689,806,4.087,846,3.292,863,2.273,904,3.362,979,1.818,980,1.38,981,2.669,982,2.9,983,3.404,984,3.404,985,2.669,986,1.38,987,1.62,988,3.948,989,1.62,990,2.669,991,1.62,992,1.62,993,1.62,994,1.62,995,1.62,996,3.948,997,1.62,998,1.62,999,2.669,1000,2.669,1001,2.9,1002,1.62,1003,1.62,1004,2.669,1005,4.366,1006,4.366,1007,1.62,1008,3.404,1009,1.38,1010,1.38,1011,1.62,1012,1.38,1013,3.404,1014,1.221,1015,1.62,1016,1.62,1017,1.62,1018,1.62,1019,3.404,1020,1.62,1021,1.62,1022,1.62,1023,1.62,1024,3.719,1025,1.62,1026,1.62,1027,2.669,1028,1.62,1029,2.669,1030,3.404,1031,1.62,1032,1.62,1033,1.62,1034,1.38,1035,1.62,1036,1.62,1037,1.62,1038,1.62,1039,1.62,1040,1.62,1041,1.62,1042,1.62,1043,2.669,1044,2.669,1045,2.669,1046,1.62,1047,2.669,1048,2.669,1049,1.62,1050,2.669,1051,1.62,1052,1.62,1053,1.62,1054,1.62,1055,1.62,1056,1.38,1057,1.62,1058,1.62]],["title/injectables/UsersCreateManyProvider.html",[130,1.138,1059,2.029]],["body/injectables/UsersCreateManyProvider.html",[3,0.226,4,0.274,5,0.2,7,1.076,10,0.067,19,1.716,24,0.428,25,0.023,26,0.737,29,0.226,30,1.5,39,4.037,41,1.98,42,1.409,43,0.015,44,0.015,76,1.673,98,3.257,111,0.688,128,2.148,130,1.526,131,1.712,137,1.249,140,0.433,142,0.841,144,1.326,175,1.98,178,2.213,188,1.822,189,1.618,190,1.142,193,1.326,221,3.511,224,2.148,241,2.082,255,2.514,339,2.348,526,1.409,535,3.11,539,2.148,544,1.837,600,4.03,654,2.348,728,2.348,795,2.6,815,4.084,818,4.084,819,3.574,820,4.084,834,4.037,1014,2.6,1059,2.722,1060,4.613,1061,2.937,1062,4.037,1063,3.448,1064,5.38,1065,3.448,1066,4.037,1067,3.448,1068,3.448,1069,2.6,1070,4.74,1071,3.448,1072,3.448,1073,3.448,1074,4.037,1075,3.448,1076,4.74,1077,3.448,1078,4.74,1079,3.448,1080,2.937,1081,3.448,1082,3.448,1083,3.448,1084,3.448,1085,3.448,1086,3.448,1087,3.448,1088,3.448,1089,3.448,1090,3.448,1091,3.448,1092,3.448,1093,3.448,1094,3.448,1095,4.74,1096,4.74,1097,3.448,1098,3.448,1099,3.448]],["title/modules/UsersModule.html",[45,1.138,62,1.882]],["body/modules/UsersModule.html",[2,1.808,3,0.267,4,0.236,5,0.236,10,0.079,24,0.508,25,0.023,26,0.87,29,0.347,43,0.016,44,0.016,45,1.896,47,1.771,48,1.771,49,2.02,50,2.02,51,1.771,52,3.095,53,2.922,57,3.041,62,3.685,63,2.629,64,2.02,65,1.889,67,2.168,74,2.534,75,1.771,76,1.167,86,3.466,88,2.772,170,3.606,181,3.51,241,1.565,979,4.009,1012,3.466,1059,3.805,1069,3.068,1100,3.466,1101,3.466,1102,3.466,1103,4.069,1104,4.069,1105,4.069,1106,4.069,1107,3.466,1108,3.466,1109,3.466,1110,4.069,1111,4.069,1112,4.069]],["title/injectables/UsersService.html",[130,1.138,181,1.754]],["body/injectables/UsersService.html",[3,0.137,4,0.121,5,0.121,7,1.127,10,0.079,18,2.039,19,1.185,24,0.449,25,0.023,26,0.446,29,0.137,30,1.989,35,1.778,36,2.229,38,1.744,42,1.868,43,0.01,44,0.01,69,3.026,75,0.908,76,1.867,88,1.422,109,1.3,111,0.664,128,2.847,130,1.054,131,1.036,136,3.447,137,1.462,140,0.262,142,0.881,144,1.909,159,0.908,161,3.038,170,1.422,175,1.88,178,2.54,181,1.625,188,1.758,189,1.561,190,1.101,206,3.044,209,2.75,212,1.778,216,1.778,217,2.646,220,2.229,221,3.026,224,1.3,227,2.646,241,1.258,242,1.422,248,1.744,254,1.744,255,2.785,271,1.424,297,1.3,309,1.112,340,1.574,407,1.422,433,2.515,487,2.515,496,2.026,500,2.788,501,1.574,526,0.853,535,3.368,539,2.515,544,1.744,556,2.626,560,1.422,564,1.778,600,2.847,654,1.422,673,2.229,766,3.894,784,2.229,792,2.788,793,2.788,794,1.778,795,3.447,802,1.778,803,1.778,804,1.422,806,1.422,814,2.788,815,3.972,818,3.044,819,4.422,820,3.972,821,3.439,822,3.439,823,3.447,824,3.439,826,3.894,828,2.788,829,1.778,830,2.788,837,1.778,838,1.778,840,1.778,846,1.574,907,2.468,982,2.788,986,2.788,1009,1.778,1010,1.778,1014,1.574,1024,1.778,1034,2.788,1059,3.163,1062,2.788,1064,4.691,1066,2.788,1069,1.574,1074,2.788,1080,3.439,1107,1.778,1108,1.778,1109,1.778,1113,1.778,1114,3.273,1115,3.273,1116,2.087,1117,4.038,1118,4.038,1119,4.572,1120,2.087,1121,2.087,1122,2.087,1123,2.087,1124,3.273,1125,3.273,1126,2.087,1127,2.087,1128,2.087,1129,2.087,1130,2.087,1131,2.087,1132,4.038,1133,2.087,1134,2.087,1135,3.273,1136,4.038,1137,3.273,1138,2.087,1139,2.087,1140,3.273,1141,2.087,1142,2.087,1143,2.087,1144,2.087,1145,2.087,1146,2.087,1147,1.778,1148,2.087,1149,2.087,1150,3.273,1151,2.087,1152,2.087]],["title/coverage.html",[1153,3.634]],["body/coverage.html",[0,2.242,1,2.203,5,0.187,6,2.755,10,0.133,25,0.023,27,1.858,43,0.014,44,0.014,51,1.407,66,2.439,69,1.858,76,0.928,78,1.092,80,1.606,83,2.251,95,1.501,99,2.439,111,0.47,130,2.048,132,2.755,148,2.203,149,2.755,161,1.723,173,2.755,181,1.606,221,1.858,223,3.419,224,2.015,225,2.755,227,1.723,241,1.244,249,1.858,250,2.755,251,3.419,255,1.501,288,1.858,376,2.439,411,2.633,412,2.755,418,2.015,419,2.755,420,2.755,430,3.419,441,2.755,470,2.203,471,3.419,472,3.419,479,1.858,480,2.203,482,1.858,487,2.015,488,2.755,489,2.755,495,2.439,504,2.633,505,2.755,533,2.203,534,2.755,541,1.858,553,2.755,554,2.755,566,2.203,567,2.015,569,2.755,583,1.858,586,2.755,632,2.015,633,2.755,644,2.203,645,2.755,659,2.755,697,2.203,698,2.755,729,1.858,763,2.755,770,1.723,841,2.755,890,2.755,907,2.439,910,2.203,911,2.755,940,2.755,963,2.755,979,2.203,980,2.755,1059,1.858,1060,2.755,1061,2.755,1113,2.755,1153,2.439,1154,3.235,1155,3.235,1156,6.594,1157,5.674,1158,3.235,1159,7.023,1160,6.192,1161,5.235,1162,3.235,1163,2.755,1164,5.974,1165,4.534,1166,2.755,1167,3.235,1168,3.235,1169,4.534,1170,3.235,1171,4.534,1172,4.534,1173,3.235,1174,3.235,1175,4.534,1176,3.235,1177,3.235,1178,3.235,1179,3.235]],["title/dependencies.html",[48,1.849,1180,2.514]],["body/dependencies.html",[10,0.115,25,0.023,26,1.04,43,0.018,44,0.018,48,2.116,75,2.116,88,3.312,239,1.987,240,3.312,244,1.987,294,4.142,526,1.987,595,4.142,596,3.667,655,4.142,656,4.142,1181,4.863,1182,4.863,1183,6.389,1184,4.863,1185,4.863,1186,4.863,1187,4.863,1188,4.863,1189,4.863,1190,4.863,1191,4.863,1192,4.863,1193,4.863,1194,4.863,1195,4.863,1196,4.863,1197,4.863,1198,4.863,1199,4.863]],["title/miscellaneous/enumerations.html",[1200,1.695,1201,3.619]],["body/miscellaneous/enumerations.html",[25,0.022,43,0.019,44,0.019,78,1.447,140,0.625,159,2.615,265,4.531,298,4.845,308,5.118,309,3.202,315,5.118,318,5.118,347,5.118,349,5.118,1200,2.859,1201,4.24,1202,4.979,1203,4.979,1204,4.979,1205,4.979,1206,6.009]],["title/miscellaneous/functions.html",[1200,1.695,1207,3.619]],["body/miscellaneous/functions.html",[25,0.02,43,0.02,44,0.02,51,2.929,140,0.691,1166,4.687,1200,3.161,1207,4.687,1208,5.503,1209,5.503,1210,5.503,1211,5.503]],["title/classes/getPostsDto.html",[10,0.069,482,2.029]],["body/classes/getPostsDto.html",[3,0.315,4,0.278,5,0.278,10,0.124,24,0.467,25,0.023,29,0.315,43,0.018,44,0.018,222,1.741,239,1.964,244,1.964,317,3.378,363,4.793,368,3.387,470,4.329,471,3.624,472,3.624,473,4.094,474,4.094,478,5.414,479,3.651,480,3.274,481,3.624,482,3.378,483,4.006,484,4.094,485,4.094,486,4.094]],["title/index.html",[140,0.371,1056,2.514,1212,2.952]],["body/index.html",[4,0.182,7,0.712,9,4.623,22,5.484,23,4.385,25,0.022,43,0.014,44,0.014,65,2.846,135,2.672,192,2.137,220,4.176,273,2.982,297,1.954,339,2.137,495,3.346,502,2.672,532,2.672,556,1.802,603,1.954,613,2.672,649,2.672,652,2.137,654,2.137,764,2.366,784,2.137,804,2.137,823,3.346,1147,2.672,1153,2.366,1213,3.137,1214,3.137,1215,4.438,1216,3.137,1217,3.137,1218,3.137,1219,4.438,1220,5.149,1221,3.137,1222,3.137,1223,5.598,1224,3.137,1225,6.439,1226,3.137,1227,6.304,1228,3.137,1229,3.137,1230,4.438,1231,3.137,1232,4.438,1233,3.137,1234,5.149,1235,3.137,1236,4.438,1237,3.137,1238,3.137,1239,3.137,1240,3.137,1241,3.137,1242,5.598,1243,4.438,1244,3.137,1245,3.137,1246,3.137,1247,4.438,1248,5.598,1249,3.137,1250,4.438,1251,3.137,1252,3.137,1253,4.438,1254,6.132,1255,5.598,1256,3.137,1257,4.438,1258,3.137,1259,3.137,1260,3.137,1261,5.598,1262,3.137,1263,3.137,1264,3.137,1265,4.438,1266,3.137,1267,3.137,1268,3.137,1269,3.137,1270,4.438,1271,3.137,1272,3.137,1273,4.438,1274,3.137,1275,3.137,1276,4.767,1277,3.137,1278,3.137,1279,3.137,1280,3.137,1281,3.137,1282,3.137,1283,3.137,1284,3.137,1285,4.438,1286,3.137,1287,3.137,1288,3.137,1289,5.149,1290,3.137,1291,3.137,1292,3.137,1293,3.137,1294,4.438,1295,3.137,1296,3.137,1297,3.137,1298,3.137,1299,4.438,1300,3.137,1301,3.137,1302,3.137,1303,4.438,1304,4.438,1305,3.137,1306,3.137,1307,3.137,1308,3.137,1309,3.137,1310,3.137,1311,3.137,1312,3.137,1313,3.137,1314,3.137,1315,3.137,1316,3.137,1317,3.137,1318,3.137,1319,3.137,1320,3.137,1321,2.672]],["title/modules.html",[47,2.097]],["body/modules.html",[25,0.019,43,0.019,44,0.019,46,3.463,47,2.212,57,2.92,58,2.92,59,2.92,60,3.167,61,2.92,62,2.709,1276,6.032,1322,7.082,1323,7.082,1324,7.082]],["title/overview.html",[1325,4.105]],["body/overview.html",[2,1.236,25,0.023,27,3.19,43,0.015,44,0.015,45,1.166,46,4.831,47,1.575,48,1.575,49,1.797,50,1.797,51,1.575,52,1.797,53,1.797,54,3.083,55,3.083,56,3.083,57,3.681,58,3.764,59,3.764,60,4.354,61,3.571,62,3.6,63,2.432,64,1.797,65,1.68,113,1.929,131,1.797,161,3.492,166,3.083,167,3.083,168,3.083,181,3.254,222,1.311,362,3.083,400,2.079,541,3.764,547,3.083,548,3.083,549,3.083,566,2.465,580,3.083,581,3.083,582,3.083,583,3.764,729,3.19,750,3.083,752,3.083,770,3.171,934,3.083,935,3.083,1059,3.19,1100,3.083,1101,3.083,1102,3.083,1325,3.083,1326,4.899,1327,3.62,1328,3.62]],["title/classes/paginationQueryDto.html",[10,0.069,479,2.029]],["body/classes/paginationQueryDto.html",[3,0.301,4,0.266,5,0.266,10,0.111,24,0.337,25,0.022,29,0.301,43,0.018,44,0.018,111,0.831,140,0.577,142,1.016,183,1.549,190,1.571,222,1.664,226,1.549,239,1.878,271,1.87,298,4.243,309,3.319,368,3.319,400,3.286,479,3.286,480,4.243,672,4.243,806,4.243,1001,5.306,1163,3.914,1329,5.721,1330,4.595,1331,4.595,1332,6.23]],["title/properties.html",[226,1.15,1180,2.514]],["body/properties.html",[7,1.249,25,0.022,43,0.02,44,0.02,226,1.49,603,3.427,1321,4.687,1333,5.503,1334,5.503,1335,5.503]],["title/miscellaneous/variables.html",[1200,1.695,1336,3.619]],["body/miscellaneous/variables.html",[25,0.021,43,0.02,44,0.02,66,4.15,99,4.808,100,4.687,140,0.691,298,3.748,672,3.748,1200,3.161,1336,4.687,1337,5.503]]],"invertedIndex":[["",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/paginationQueryDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1159,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1334,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1190,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1189,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1160,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":394,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t12:00:00z",{"_index":395,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["03",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":400,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"overview.html":{},"classes/paginationQueryDto.html":{}}}],["1.1.23",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1157,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{},"classes/paginationQueryDto.html":{}}}],["10.0.0",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1188,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1156,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":667,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["11/12",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1328,"title":{},"body":{"overview.html":{}}}],["150",{"_index":868,"title":{},"body":{"injectables/PostsService.html":{}}}],["16t07:46:32+0000",{"_index":396,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.12.2",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["1})@get",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{}}}],["1})@isint()@isnotempty",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@isoptional()@isint()@type(undefined",{"_index":498,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":401,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1161,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":724,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":708,"title":{},"body":{"controllers/PostsController.html":{}}}],["2022",{"_index":393,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2024",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":678,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["3.2.2",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"overview.html":{}}}],["4/4",{"_index":1162,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1172,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":402,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5/5",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1178,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["512",{"_index":686,"title":{},"body":{"entities/Post.html":{}}}],["6",{"_index":1327,"title":{},"body":{"overview.html":{}}}],["66",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1326,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":1187,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1198,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.11.5",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["90",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["91",{"_index":841,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["96",{"_index":964,"title":{},"body":{"entities/User.html":{}}}],["accepts",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["account",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["actions",{"_index":696,"title":{},"body":{"entities/Post.html":{}}}],["actual",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":849,"title":{},"body":{"injectables/PostsService.html":{}}}],["address",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["again",{"_index":831,"title":{},"body":{"injectables/PostsService.html":{}}}],["against",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allow",{"_index":773,"title":{},"body":{"injectables/PostsService.html":{}}}],["allowing",{"_index":1266,"title":{},"body":{"index.html":{}}}],["allows",{"_index":908,"title":{},"body":{"entities/Tag.html":{}}}],["alphanumeric",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["already",{"_index":828,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":1309,"title":{},"body":{"index.html":{}}}],["api",{"_index":500,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["apioperation",{"_index":731,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":706,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":243,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":425,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apiproperty({description",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":228,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":378,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":427,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":421,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":423,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["apipropertyoptional({description",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":732,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":733,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":739,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":926,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1211,"title":{},"body":{"miscellaneous/functions.html":{}}}],["app.controller",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{}}}],["applications",{"_index":1219,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":46,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approach",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["appservice",{"_index":27,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":229,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["assign",{"_index":887,"title":{},"body":{"injectables/PostsService.html":{}}}],["assigning",{"_index":848,"title":{},"body":{"injectables/PostsService.html":{}}}],["associated",{"_index":787,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":535,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":148,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["authmodule",{"_index":57,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":603,"title":{},"body":{"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["author.posts",{"_index":661,"title":{},"body":{"entities/Post.html":{}}}],["authorid",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":161,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":977,"title":{},"body":{"entities/User.html":{}}}],["available",{"_index":1112,"title":{},"body":{"modules/UsersModule.html":{}}}],["await",{"_index":600,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1257,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1310,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":792,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('please",{"_index":845,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('post",{"_index":827,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('user",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":1252,"title":{},"body":{"index.html":{}}}],["baseurl",{"_index":615,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["basic",{"_index":133,"title":{},"body":{"injectables/AppService.html":{}}}],["being",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["below",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["between",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["bidirectional",{"_index":529,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{}}}],["blog",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":1302,"title":{},"body":{"index.html":{}}}],["body",{"_index":540,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["boostrap",{"_index":1209,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":485,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["browse",{"_index":1324,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1322,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1215,"title":{},"body":{"index.html":{}}}],["business",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["cacluating",{"_index":620,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["call",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["can't",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["cascade",{"_index":527,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":518,"title":{},"body":{"entities/MetaOption.html":{}}}],["cascade:true",{"_index":609,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["catch",{"_index":818,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["cause",{"_index":826,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["caution",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":1278,"title":{},"body":{"index.html":{}}}],["character",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["chars",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checking",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["circular",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":10,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/TagsService.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["classes",{"_index":222,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/TagsService.html":{},"classes/getPostsDto.html":{},"overview.html":{},"classes/paginationQueryDto.html":{}}}],["clicks",{"_index":1265,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1251,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":547,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_exports",{"_index":549,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":548,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":580,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":582,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":581,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":750,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":751,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":752,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":934,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":935,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1100,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1101,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1102,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":523,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":512,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1271,"title":{},"body":{"index.html":{}}}],["commented",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["commit",{"_index":1086,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["common/pagination/pagination.module",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["communicating",{"_index":825,"title":{},"body":{"injectables/PostsService.html":{}}}],["complete",{"_index":1092,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["compodoc/compodoc",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":800,"title":{},"body":{"injectables/PostsService.html":{}}}],["conbine",{"_index":484,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["config/app.config",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1109,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1111,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["confirmation",{"_index":863,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["conflictexception",{"_index":1068,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["conflictexception('could",{"_index":1091,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["connect",{"_index":1074,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["connecting",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":1096,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["console.log('the",{"_index":869,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(createpostdto",{"_index":744,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(error",{"_index":834,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["console.log(getusersparamdto",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(headers",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(id",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(inversepost",{"_index":855,"title":{},"body":{"injectables/PostsService.html":{}}}],["console.log(ip",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(limit",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(page",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(params",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(query",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(request",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(datasource",{"_index":1063,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["constructor(metaoptionsrepository",{"_index":555,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["constructor(request",{"_index":588,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagrepository",{"_index":944,"title":{},"body":{"classes/TagsService.html":{}}}],["constructor(userservice",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersservice",{"_index":767,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructs",{"_index":785,"title":{},"body":{"injectables/PostsService.html":{}}}],["contain",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["containing",{"_index":790,"title":{},"body":{"injectables/PostsService.html":{}}}],["contains",{"_index":40,"title":{},"body":{"controllers/AppController.html":{}}}],["content",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":545,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":738,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":925,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["corrected",{"_index":802,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["corresponding",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["courses",{"_index":1284,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1153,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":241,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["created",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["createdat",{"_index":506,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":508,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmanyusers",{"_index":1062,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusers(createmanyusersdto",{"_index":1066,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["createmanyusersdto",{"_index":221,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createmanyusersdto.users",{"_index":1079,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["createpost",{"_index":701,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":743,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(createpostdto",{"_index":705,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":249,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":811,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto.slug",{"_index":817,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto.tags.length",{"_index":844,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto})@post",{"_index":710,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostmetaoptions",{"_index":536,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["createpostmetaoptions(createpostmetaoptionsdto",{"_index":537,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["createpostmetaoptionsdto",{"_index":288,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdtor",{"_index":408,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["creates",{"_index":231,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["createtag",{"_index":912,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(@body",{"_index":927,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtagsdto",{"_index":915,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtags",{"_index":941,"title":{},"body":{"classes/TagsService.html":{}}}],["createtags(@body",{"_index":955,"title":{},"body":{"classes/TagsService.html":{}}}],["createtags(createtagsdto",{"_index":947,"title":{},"body":{"classes/TagsService.html":{}}}],["createtagsdto",{"_index":418,"title":{"classes/CreateTagsDto.html":{}},"body":{"classes/CreateTagsDto.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@req",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":227,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createmanyusersdto",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PostsService.html":{}}}],["current",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["currently",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentpage",{"_index":576,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["data",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["database",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["database.autoloadentities",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["database.config",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconfig",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":1064,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"classes/getPostsDto.html":{}}}],["db",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{}}}],["declarations",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorated",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"classes/GetUsersParamDto.html":{}}}],["decorator",{"_index":904,"title":{},"body":{"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["decorators",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"classes/paginationQueryDto.html":{}}}],["deeper",{"_index":1280,"title":{},"body":{"index.html":{}}}],["default",{"_index":672,"title":{},"body":{"entities/Post.html":{},"controllers/UsersController.html":{},"classes/paginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":531,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PaginationProvider.html":{}}}],["defined",{"_index":142,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"classes/paginationQueryDto.html":{}}}],["defines",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["defining",{"_index":413,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["delegates",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["delete",{"_index":713,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{}}}],["delete('soft",{"_index":921,"title":{},"body":{"controllers/TagsController.html":{}}}],["deleted",{"_index":864,"title":{},"body":{"injectables/PostsService.html":{},"classes/TagsService.html":{}}}],["deletedat",{"_index":891,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":893,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":702,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@query('id",{"_index":748,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":712,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(postid",{"_index":777,"title":{},"body":{"injectables/PostsService.html":{}}}],["deletetags",{"_index":913,"title":{},"body":{"controllers/TagsController.html":{},"classes/TagsService.html":{}}}],["deletetags(@query('id",{"_index":929,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetags(id",{"_index":918,"title":{},"body":{"controllers/TagsController.html":{},"classes/TagsService.html":{}}}],["deleting",{"_index":858,"title":{},"body":{"injectables/PostsService.html":{}}}],["dependencies",{"_index":48,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["deploy",{"_index":1242,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1256,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1247,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1264,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1228,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1290,"title":{},"body":{"index.html":{}}}],["different",{"_index":832,"title":{},"body":{"injectables/PostsService.html":{}}}],["digit",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["directional",{"_index":857,"title":{},"body":{"injectables/PostsService.html":{}}}],["discord",{"_index":1277,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1279,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":495,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{},"index.html":{}}}],["doe",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["don't",{"_index":975,"title":{},"body":{"entities/User.html":{}}}],["dots/create",{"_index":734,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dots/get",{"_index":736,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dots/patch",{"_index":735,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["draft",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dto/pagination",{"_index":593,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos",{"_index":486,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["dtos/create",{"_index":544,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":1098,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["e2e",{"_index":1237,"title":{},"body":{"index.html":{}}}],["each",{"_index":245,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/PostsService.html":{}}}],["eager",{"_index":662,"title":{},"body":{"entities/Post.html":{}}}],["eager:true",{"_index":607,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["efficient",{"_index":1216,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1245,"title":{},"body":{"index.html":{}}}],["email",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["end",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"injectables/UsersService.html":{}}}],["enddate",{"_index":473,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["endpoint",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["endpoints",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":502,"title":{},"body":{"classes/GetUsersParamDto.html":{},"index.html":{}}}],["enterprise",{"_index":1293,"title":{},"body":{"index.html":{}}}],["entire",{"_index":906,"title":{},"body":{"entities/Tag.html":{}}}],["entities",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":504,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1201,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":375,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/posttype.enum",{"_index":374,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["error",{"_index":819,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["example",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exceed",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["exception",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["execution",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["exist",{"_index":830,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["existing",{"_index":723,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["existinguser",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":829,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1282,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":761,"title":{},"body":{"modules/PostsModule.html":{}}}],["export",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["exported",{"_index":762,"title":{},"body":{"modules/PostsModule.html":{}}}],["exports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exposes",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["express",{"_index":596,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":483,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/getPostsDto.html":{}}}],["extracted",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{}}}],["false",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1259,"title":{},"body":{"index.html":{}}}],["featured",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1268,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":789,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["fetches",{"_index":783,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["fetching",{"_index":490,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["few",{"_index":1261,"title":{},"body":{"index.html":{}}}],["field",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["fields",{"_index":653,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["filename",{"_index":838,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["finally",{"_index":1094,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["finalres",{"_index":627,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":814,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":766,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall('12345",{"_index":788,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall(userid",{"_index":780,"title":{},"body":{"injectables/PostsService.html":{}}}],["finding",{"_index":854,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmultipletags",{"_index":942,"title":{},"body":{"classes/TagsService.html":{}}}],["findmultipletags(tags",{"_index":950,"title":{},"body":{"classes/TagsService.html":{}}}],["findonebyid",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["firstname",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["focus",{"_index":1267,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1296,"title":{},"body":{"index.html":{}}}],["foreign",{"_index":859,"title":{},"body":{"injectables/PostsService.html":{}}}],["format",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["forwardref",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":837,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["full",{"_index":1292,"title":{},"body":{"index.html":{}}}],["functino",{"_index":1210,"title":{},"body":{"miscellaneous/functions.html":{}}}],["function",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1207,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1263,"title":{},"body":{"index.html":{}}}],["generate",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["generates",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id/:optional",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":717,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":141,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":703,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":715,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostsbasedto",{"_index":470,"title":{"classes/GetPostsBaseDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"coverage.html":{},"classes/getPostsDto.html":{}}}],["getpostsdto",{"_index":482,"title":{"classes/getPostsDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"classes/getPostsDto.html":{}}}],["getting",{"_index":1212,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param('id",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":487,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["given",{"_index":501,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["globally",{"_index":606,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["good",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":1287,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["grow",{"_index":1306,"title":{},"body":{"index.html":{}}}],["handle",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/UsersService.html":{}}}],["handles",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["handling",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["hands",{"_index":1281,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1272,"title":{},"body":{"index.html":{}}}],["headers",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":146,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1285,"title":{},"body":{"index.html":{}}}],["helps",{"_index":658,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["here",{"_index":804,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["host",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["http",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":793,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["https://example.com/featured",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":1318,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":387,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:v/schema.org",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:v\\/schema.org",{"_index":389,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["httpstatus",{"_index":794,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.moved_permanently",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.not_found",{"_index":836,"title":{},"body":{"injectables/PostsService.html":{}}}],["hyphen",{"_index":383,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["hyphen.'})@maxlength(256)@minlength(3",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["hyphens",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["id",{"_index":496,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1154,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image.jpg",{"_index":391,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implementation",{"_index":565,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["implements",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["imported",{"_index":760,"title":{},"body":{"modules/PostsModule.html":{},"controllers/UsersController.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":959,"title":{},"body":{"classes/TagsService.html":{}}}],["include",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["included",{"_index":405,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["incoming",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":140,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/paginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["indicating",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["information",{"_index":1249,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":1269,"title":{},"body":{"index.html":{}}}],["inherit",{"_index":648,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["inject",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(request",{"_index":599,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":130,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":131,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["injecting",{"_index":598,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["injection",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["injectrepository",{"_index":560,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":561,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":801,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":954,"title":{},"body":{"classes/TagsService.html":{}}}],["injectrepository(user",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":772,"title":{},"body":{"injectables/PostsService.html":{}}}],["input",{"_index":635,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["insert",{"_index":695,"title":{},"body":{"entities/Post.html":{}}}],["install",{"_index":1262,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1226,"title":{},"body":{"index.html":{}}}],["instance",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["integer",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["interact",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["interaction",{"_index":774,"title":{},"body":{"injectables/PostsService.html":{}}}],["interface",{"_index":566,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":568,"title":{},"body":{"interfaces/Paginated.html":{}}}],["interfaces/paginated.interface",{"_index":597,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":478,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["inversepost",{"_index":851,"title":{},"body":{"injectables/PostsService.html":{}}}],["ip",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":236,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["isdate()@isoptional",{"_index":475,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["isemail",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty()@maxlength(96",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":381,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":386,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":367,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{}}}],["isnotempty",{"_index":237,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isjson",{"_index":416,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["iso8601",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":368,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["isoptional()@isjson",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@ispositive",{"_index":1329,"title":{},"body":{"classes/paginationQueryDto.html":{}}}],["ispositive",{"_index":1332,"title":{},"body":{"classes/paginationQueryDto.html":{}}}],["isstring",{"_index":369,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@maxlength(96)@matches(/^(?=.*[a",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@maxlength(96",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["issues",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["isurl",{"_index":370,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["it's",{"_index":503,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["items",{"_index":232,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{}}}],["itemsperpage",{"_index":574,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["job",{"_index":1299,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1301,"title":{},"body":{"index.html":{}}}],["john",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["joi",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1312,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":524,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":688,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["kamil",{"_index":1315,"title":{},"body":{"index.html":{}}}],["key",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["last",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["lastname",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":824,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["learn",{"_index":1274,"title":{},"body":{"index.html":{}}}],["legend",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1321,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1304,"title":{},"body":{"index.html":{}}}],["limit",{"_index":806,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/paginationQueryDto.html":{}}}],["linenumber",{"_index":840,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":1298,"title":{},"body":{"index.html":{}}}],["links",{"_index":570,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":786,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["literal",{"_index":572,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["loggin",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["logging",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["logic",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(email",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":1250,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1295,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["main",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["main.ts",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["make",{"_index":605,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["makes",{"_index":649,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["managin",{"_index":700,"title":{},"body":{"controllers/PostsController.html":{}}}],["managing",{"_index":764,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["many",{"_index":224,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["many.provider",{"_index":1107,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["many.provider.ts",{"_index":1061,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:11",{"_index":1065,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["many.provider.ts:13",{"_index":1067,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["manytomany",{"_index":689,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":682,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":690,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":660,"title":{},"body":{"entities/Post.html":{}}}],["mapped",{"_index":657,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["mapping",{"_index":636,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["match",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":371,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":382,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["matching",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/paginationQueryDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":624,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["mau",{"_index":1254,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":372,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":392,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["maxlength(256",{"_index":384,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["maxlength(512",{"_index":380,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["means",{"_index":573,"title":{},"body":{"interfaces/Paginated.html":{}}}],["message",{"_index":139,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["meta",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["metadata",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["metaoption",{"_index":95,"title":{"entities/MetaOption.html":{}},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptions",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptions.dto",{"_index":377,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoptions.dto.ts",{"_index":412,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:9",{"_index":417,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptions.post",{"_index":670,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":533,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":58,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":558,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":541,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":403,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength",{"_index":373,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":385,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":379,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":1200,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1303,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1230,"title":{},"body":{"index.html":{}}}],["module",{"_index":45,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":47,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":822,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["more",{"_index":1248,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1316,"title":{},"body":{"index.html":{}}}],["name",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["need",{"_index":654,"title":{},"body":{"classes/PatchUserDto.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["nest",{"_index":1220,"title":{},"body":{"index.html":{}}}],["nested",{"_index":247,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["nestframework",{"_index":1320,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":595,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":655,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":244,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"classes/getPostsDto.html":{}}}],["nestjs/typeorm",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newurl",{"_index":618,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}page=${nextpage",{"_index":630,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}page=${prevpage",{"_index":631,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}page=${totalpages",{"_index":629,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}page=1",{"_index":628,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":1080,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["newusers",{"_index":1070,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["newusers.push(result",{"_index":1084,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["next",{"_index":578,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["nextpage",{"_index":625,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1214,"title":{},"body":{"index.html":{}}}],["now",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":1225,"title":{},"body":{"index.html":{}}}],["null",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["nullable",{"_index":513,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/paginationQueryDto.html":{}}}],["numbers",{"_index":621,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["object",{"_index":248,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["objectliteral",{"_index":594,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["objects",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":1300,"title":{},"body":{"index.html":{}}}],["official",{"_index":1255,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":517,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{}}}],["onetomany",{"_index":973,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":970,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":525,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":515,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1305,"title":{},"body":{"index.html":{}}}],["operations",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["option",{"_index":415,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["option.entity",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":505,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":511,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":514,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":509,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":521,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:31",{"_index":519,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.service",{"_index":543,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["option.service.ts",{"_index":554,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["option.service.ts:13",{"_index":559,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["option.service.ts:8",{"_index":557,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["option1",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option2",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["option3",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"classes/paginationQueryDto.html":{}}}],["options",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["options.controller",{"_index":551,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":534,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:10",{"_index":538,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["options.module.ts",{"_index":550,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options/dtos/create",{"_index":376,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":553,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["optionsfrom",{"_index":861,"title":{},"body":{"injectables/PostsService.html":{}}}],["otherwise",{"_index":872,"title":{},"body":{"injectables/PostsService.html":{}}}],["out",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1325,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p@ssw0rd123",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["package",{"_index":1180,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"classes/paginationQueryDto.html":{}}}],["paginated",{"_index":567,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["pagination",{"_index":614,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{}}}],["paginationmodule",{"_index":59,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":583,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquery",{"_index":587,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery(paginationquery",{"_index":590,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":612,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":611,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":479,"title":{"classes/paginationQueryDto.html":{}},"body":{"classes/GetPostsBaseDto.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["pairs",{"_index":410,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('userid",{"_index":740,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":489,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:26",{"_index":499,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameter",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":727,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1291,"title":{},"body":{"index.html":{}}}],["partial",{"_index":651,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["partialtype",{"_index":641,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":637,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":647,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["passing",{"_index":528,"title":{},"body":{"entities/MetaOption.html":{}}}],["password",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":634,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patching",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{}}}],["patching/updating",{"_index":646,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["patchpostdto",{"_index":632,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":880,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":884,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":867,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.posttype",{"_index":874,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishedon",{"_index":886,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.schema",{"_index":882,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":876,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":878,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.tags.length",{"_index":866,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":871,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto})@patch",{"_index":725,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":644,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["perform",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":390,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["placeholder",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["platform",{"_index":1253,"title":{},"body":{"index.html":{}}}],["please",{"_index":823,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["point",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["port",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["possible",{"_index":1246,"title":{},"body":{"index.html":{}}}],["post",{"_index":78,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":707,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(512",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('create",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.'})@isstring()@isoptional",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.author.id",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":879,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":642,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:105",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:119",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:133",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:146",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:161",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:17",{"_index":639,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:190",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:199",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:43",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:57",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:78",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:92",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":755,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":883,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":516,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions.id",{"_index":853,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.posttype",{"_index":873,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.publishedon",{"_index":885,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.schema",{"_index":881,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":875,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":877,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":888,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.title",{"_index":870,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["postid",{"_index":779,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery",{"_index":716,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery.limit",{"_index":807,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery.page",{"_index":808,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":699,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":754,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.dto",{"_index":737,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.dto.ts",{"_index":472,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"coverage.html":{},"classes/getPostsDto.html":{}}}],["posts.dto.ts:12",{"_index":476,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.dto.ts:8",{"_index":477,"title":{},"body":{"classes/GetPostsBaseDto.html":{}}}],["posts.service.ts",{"_index":839,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts.tags",{"_index":899,"title":{},"body":{"entities/Tag.html":{}}}],["posts/post.entity",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":697,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":60,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":768,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":729,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":693,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prev",{"_index":579,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["prevpage",{"_index":626,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarycolumn",{"_index":974,"title":{},"body":{"entities/User.html":{}}}],["primarygeneratedcolumn",{"_index":510,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["process",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1232,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1108,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1213,"title":{},"body":{"index.html":{}}}],["project",{"_index":1223,"title":{},"body":{"index.html":{}}}],["promise",{"_index":592,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["properly",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":226,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"classes/paginationQueryDto.html":{},"properties.html":{}}}],["provided",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{}}}],["providers",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":542,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination.provider",{"_index":585,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":730,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":924,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users",{"_index":1106,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["public",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isenum(status)@isnotempty",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":728,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{}}}],["query('limit",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{}}}],["query.dto",{"_index":481,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"injectables/PaginationProvider.html":{},"classes/getPostsDto.html":{}}}],["query.dto.ts",{"_index":1163,"title":{},"body":{"coverage.html":{},"classes/paginationQueryDto.html":{}}}],["query.dto.ts:10",{"_index":1331,"title":{},"body":{"classes/paginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":1330,"title":{},"body":{"classes/paginationQueryDto.html":{}}}],["queryrunner",{"_index":1072,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":1087,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":1075,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":1081,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":1083,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":1097,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1090,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":1077,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["questions",{"_index":1275,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":388,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ramya",{"_index":147,"title":{},"body":{"injectables/AppService.html":{}}}],["randomly",{"_index":720,"title":{},"body":{"controllers/PostsController.html":{}}}],["read",{"_index":1313,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1241,"title":{},"body":{"index.html":{}}}],["real",{"_index":1288,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["related",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["relations",{"_index":602,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["relationship",{"_index":530,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{}}}],["release",{"_index":1095,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["remember",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["removing",{"_index":810,"title":{},"body":{"injectables/PostsService.html":{}}}],["replaced",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":556,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository.count",{"_index":622,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":601,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["req",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["requests",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["requesttimeoutexception",{"_index":795,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["requesttimeoutexception('could",{"_index":1078,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["requesttimeoutexception('unable",{"_index":835,"title":{},"body":{"injectables/PostsService.html":{}}}],["required",{"_index":230,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1260,"title":{},"body":{"index.html":{}}}],["reset",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["resources",{"_index":1270,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["result",{"_index":1082,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["results",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"classes/getPostsDto.html":{},"index.html":{},"modules.html":{},"overview.html":{},"classes/paginationQueryDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":782,"title":{},"body":{"injectables/PostsService.html":{}}}],["retrieving",{"_index":492,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["return",{"_index":137,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":144,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":1089,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["routes",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["rules",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["run",{"_index":1227,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1071,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["runs",{"_index":1244,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1197,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":889,"title":{},"body":{"injectables/PostsService.html":{}}}],["saving",{"_index":564,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/UsersService.html":{}}}],["scalable",{"_index":1217,"title":{},"body":{"index.html":{}}}],["schedule",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scheduled",{"_index":1206,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["sent",{"_index":846,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["series",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series'})@isenum(posttype)@isnotempty",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":1218,"title":{},"body":{"index.html":{}}}],["service",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["services",{"_index":799,"title":{},"body":{"injectables/PostsService.html":{}}}],["set",{"_index":905,"title":{},"body":{"entities/Tag.html":{}}}],["setup",{"_index":1224,"title":{},"body":{"index.html":{}}}],["side",{"_index":532,"title":{},"body":{"entities/MetaOption.html":{},"index.html":{}}}],["sidebarenabled",{"_index":404,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["simulates",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["single",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["skip",{"_index":610,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["slug",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["slugs",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["soft",{"_index":909,"title":{},"body":{"entities/Tag.html":{}}}],["soft_deleted",{"_index":962,"title":{},"body":{"classes/TagsService.html":{}}}],["softdelete",{"_index":943,"title":{},"body":{"classes/TagsService.html":{}}}],["softdelete(id",{"_index":952,"title":{},"body":{"classes/TagsService.html":{}}}],["softdeletetags",{"_index":914,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetags(@query('id",{"_index":932,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetags(id",{"_index":920,"title":{},"body":{"controllers/TagsController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/getPostsDto.html":{},"index.html":{},"classes/paginationQueryDto.html":{}}}],["special",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":497,"title":{},"body":{"classes/GetUsersParamDto.html":{},"entities/Post.html":{}}}],["specified",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["specify",{"_index":491,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["speciif",{"_index":719,"title":{},"body":{"controllers/PostsController.html":{}}}],["sponsors",{"_index":1308,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1208,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":1203,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":1202,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":132,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:13",{"_index":143,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":1105,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:27",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:37",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/common/pagination/dto/pagination",{"_index":480,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"coverage.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":798,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":569,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":757,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":584,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination.provider",{"_index":797,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/providers/pagination.provider.ts",{"_index":586,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:17",{"_index":591,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/common/pagination/providers/pagination.provider.ts:9",{"_index":589,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/main.ts",{"_index":1166,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":411,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dots/create",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dots/get",{"_index":471,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"coverage.html":{},"classes/getPostsDto.html":{}}}],["src/posts/dots/patch",{"_index":633,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":1205,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1204,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":522,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":659,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:19",{"_index":669,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":687,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:34",{"_index":674,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:42",{"_index":680,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:50",{"_index":681,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:56",{"_index":665,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:62",{"_index":677,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:69",{"_index":668,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:75",{"_index":676,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:83",{"_index":671,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:86",{"_index":663,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:90",{"_index":685,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":698,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":718,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":711,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:72",{"_index":726,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:77",{"_index":714,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":753,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":763,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:168",{"_index":778,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:191",{"_index":791,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:27",{"_index":771,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:52",{"_index":781,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:75",{"_index":775,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":419,"title":{},"body":{"classes/CreateTagsDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":796,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":940,"title":{},"body":{"classes/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:13",{"_index":948,"title":{},"body":{"classes/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:19",{"_index":951,"title":{},"body":{"classes/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:27",{"_index":949,"title":{},"body":{"classes/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:36",{"_index":953,"title":{},"body":{"classes/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:7",{"_index":945,"title":{},"body":{"classes/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":692,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":890,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":897,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":898,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":902,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":895,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":901,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":896,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:53",{"_index":900,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:56",{"_index":892,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:59",{"_index":903,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:62",{"_index":894,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":911,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:25",{"_index":917,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:30",{"_index":919,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:36",{"_index":922,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":756,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":936,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":223,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":488,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":645,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users",{"_index":1060,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:114",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:134",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:25",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:47",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:91",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":691,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":963,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":966,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:22",{"_index":968,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:30",{"_index":965,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":969,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":972,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:8",{"_index":967,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:111",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:139",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:144",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:89",{"_index":998,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1103,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{},"injectables/UsersCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1231,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1233,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":474,"title":{},"body":{"classes/GetPostsBaseDto.html":{},"classes/getPostsDto.html":{}}}],["started",{"_index":1056,"title":{"index.html":{}},"body":{"controllers/UsersController.html":{}}}],["starter",{"_index":1222,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1155,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["status.draft",{"_index":694,"title":{},"body":{"entities/Post.html":{}}}],["stay",{"_index":1294,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1243,"title":{},"body":{"index.html":{}}}],["story",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1258,"title":{},"body":{"index.html":{}}}],["string",{"_index":145,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["string(e",{"_index":1099,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["string(error",{"_index":1093,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["strings",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["structure",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["succesfully",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{}}}],["succesfully'})@apiquery({name",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["success",{"_index":776,"title":{},"body":{"injectables/PostsService.html":{}}}],["successfull",{"_index":1085,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["successfully",{"_index":709,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["successfully'})@post",{"_index":916,"title":{},"body":{"controllers/TagsController.html":{}}}],["such",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["summary",{"_index":742,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1276,"title":{},"body":{"index.html":{},"modules.html":{}}}],["supports",{"_index":493,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["svg",{"_index":1323,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":494,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["synchronize",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":571,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":907,"title":{},"body":{"entities/Tag.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1179,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":80,"title":{"entities/Tag.html":{}},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"coverage.html":{}}}],["tag.entity",{"_index":938,"title":{},"body":{"modules/TagsModule.html":{},"classes/TagsService.html":{}}}],["tag.posts",{"_index":683,"title":{},"body":{"entities/Post.html":{}}}],["tag1",{"_index":397,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":398,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag3",{"_index":399,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tagrepository",{"_index":946,"title":{},"body":{"classes/TagsService.html":{}}}],["tags",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{}}}],["tags.controller",{"_index":937,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.dto",{"_index":923,"title":{},"body":{"controllers/TagsController.html":{},"classes/TagsService.html":{}}}],["tags.dto.ts",{"_index":420,"title":{},"body":{"classes/CreateTagsDto.html":{},"coverage.html":{}}}],["tags.dto.ts:19",{"_index":426,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:33",{"_index":429,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:38",{"_index":422,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:43",{"_index":428,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.dto.ts:49",{"_index":424,"title":{},"body":{"classes/CreateTagsDto.html":{}}}],["tags.length",{"_index":843,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/soft",{"_index":931,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tag.entity",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["tags/tags.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":910,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagservice",{"_index":769,"title":{},"body":{"injectables/PostsService.html":{}}}],["tagsmodule",{"_index":61,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":770,"title":{"classes/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":613,"title":{},"body":{"injectables/PaginationProvider.html":{},"index.html":{}}}],["test",{"_index":1236,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":1239,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1238,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1234,"title":{},"body":{"index.html":{}}}],["text",{"_index":664,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1307,"title":{},"body":{"index.html":{}}}],["things",{"_index":759,"title":{},"body":{"modules/PostsModule.html":{},"entities/Tag.html":{}}}],["this.datasource.createqueryrunner",{"_index":1073,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["this.metaoptionsrepository.create",{"_index":562,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.create(createpostdto.metaoptions",{"_index":812,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.delete(post.metaoptions.id",{"_index":862,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.find",{"_index":852,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(metaoption",{"_index":563,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.save(metaoptions",{"_index":813,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsservice.createpostmetaoptions",{"_index":546,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationprovider.paginationquery",{"_index":805,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository",{"_index":809,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":847,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(postid",{"_index":860,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":816,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":850,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":745,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(id",{"_index":749,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":741,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(patchpostdto",{"_index":747,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.request.headers.host",{"_index":617,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.request.protocol",{"_index":616,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.tagrepository.create(createtagsdto",{"_index":956,"title":{},"body":{"classes/TagsService.html":{}}}],["this.tagrepository.delete(id",{"_index":960,"title":{},"body":{"classes/TagsService.html":{}}}],["this.tagrepository.find",{"_index":958,"title":{},"body":{"classes/TagsService.html":{}}}],["this.tagrepository.save(tag",{"_index":957,"title":{},"body":{"classes/TagsService.html":{}}}],["this.tagrepository.softdelete(id",{"_index":961,"title":{},"body":{"classes/TagsService.html":{}}}],["this.tagservice.findmultipletags(createpostdto.tags",{"_index":842,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagservice.findmultipletags(patchpostdto.tags",{"_index":865,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.createtags(createtagsdto",{"_index":928,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.deletetags(id",{"_index":930,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.softdelete(id",{"_index":933,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.userscreatemanyprovider.createmanyusers",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.findonebyid('1234",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createmanyusers(createmanyusersdto",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(createpostdto.authorid",{"_index":833,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":820,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["time",{"_index":1289,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":675,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["totalitems",{"_index":575,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":577,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totla",{"_index":623,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1314,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":1076,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["transfer",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["transform",{"_index":246,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["transformer",{"_index":240,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":684,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":234,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["try",{"_index":815,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":1319,"title":{},"body":{"index.html":{}}}],["type",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"classes/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"coverage.html":{},"classes/paginationQueryDto.html":{}}}],["typeorm",{"_index":526,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"classes/TagsService.html":{},"entities/User.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":552,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":758,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":939,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1110,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":656,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1221,"title":{},"body":{"index.html":{}}}],["typo",{"_index":803,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unable",{"_index":821,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["undefined",{"_index":673,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["undefined.id",{"_index":971,"title":{},"body":{"entities/User.html":{}}}],["undefined})@isarray()@isnotempty()@validatenested({each",{"_index":233,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["under",{"_index":608,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["uni",{"_index":856,"title":{},"body":{"injectables/PostsService.html":{}}}],["unique",{"_index":679,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1235,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":539,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{},"classes/TagsService.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1335,"title":{},"body":{"properties.html":{}}}],["unsuccessfull",{"_index":1088,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{}}}],["until",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["update",{"_index":643,"title":{},"body":{"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["update'})@isint()@isnotempty",{"_index":638,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["updatedat",{"_index":507,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":520,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":704,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":746,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":722,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updates",{"_index":652,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":640,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["uppercase",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{}}}],["url(this.request.url",{"_index":619,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["use",{"_index":407,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["used",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["usefactory",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":650,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["user",{"_index":76,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":242,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:27",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:39",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:50",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:75",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1069,"title":{},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.service.ts",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":721,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateManyUsersDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1104,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersCreateManyProvider.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":225,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:19",{"_index":235,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users/:id",{"_index":999,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/user.entity",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":979,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscreatemanyprovider",{"_index":1059,"title":{"injectables/UsersCreateManyProvider.html":{}},"body":{"injectables/UsersCreateManyProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userservice",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":62,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":181,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":765,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":784,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["valid",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["validaiotn",{"_index":406,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validaiton",{"_index":409,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":414,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["validated",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":238,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validates",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validation",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["validationpipe",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":239,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostsBaseDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{},"classes/getPostsDto.html":{},"classes/paginationQueryDto.html":{}}}],["value",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{},"classes/paginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["value2",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["value3",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["values",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"injectables/PaginationProvider.html":{}}}],["varchar",{"_index":666,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1158,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1336,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1333,"title":{},"body":{"properties.html":{}}}],["via",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["video",{"_index":1283,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1273,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1286,"title":{},"body":{"index.html":{}}}],["void",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["want",{"_index":604,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["watch",{"_index":1229,"title":{},"body":{"index.html":{}}}],["way",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["website",{"_index":1317,"title":{},"body":{"index.html":{}}}],["whether",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["without",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["word",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["working",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["x",{"_index":1297,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1311,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1240,"title":{},"body":{"index.html":{}}}],["z0",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagsDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                The main application controller.\n\nThis class handles incoming HTTP requests and delegates execution to the corresponding service methods.\nDecorated with @Controller() to indicate it is a controller in the NestJS framework.\n\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * The main application controller.\n * - This class handles incoming HTTP requests and delegates execution to the corresponding service methods.\n * - Decorated with `@Controller()` to indicate it is a controller in the NestJS framework.\n */\n@Controller()\nexport class AppController {\n  /**\n   * Constructor for `AppController`.\n   * - The `AppService` is injected via dependency injection to handle business logic.\n   * @param appService - An instance of `AppService` that contains the business logic.\n   */\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n/**\n * Users Created Modules\n */\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { User } from './users/user.entity';\n// import { Post } from './posts/post.entity';\n// import { Tag } from './tags/tag.entity';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { TagsModule } from './tags/tags.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\n// import { User } from './users/user.entity';\n// import { Tag } from './tags/tag.entity';\n// import { MetaOption } from './meta-options/meta-option.entity';\nimport { PaginationModule } from './common/pagination/pagination.module';\n// import { Post } from './posts/post.entity';\n// import { MetaOption } from './meta-options/meta-option.entity';\n\nconst ENV = process.env.NODE_ENV;\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User, Post, Tag, MetaOption],\n        synchronize: configService.get('database.synchronize'),\n        autoLoadEntities: configService.get(\n          'database.autoLoadEntities',\n        ),\n        port: configService.get('database.port'), //database.config\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService is a basic service that handles business logic for the application.\nIt provides a simple method to return a greeting message.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:13\n                        \n                    \n\n\n            \n                \n                        AppService is a basic service that handles business logic for the application.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A greeting message that says \"Hello From Ramya!\"\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * AppService is a basic service that handles business logic for the application.\n * It provides a simple method to return a greeting message.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * AppService is a basic service that handles business logic for the application.\n   * @returns A greeting message that says \"Hello From Ramya!\"\n   */\n  getHello(): string {\n    return 'Hello From Ramya!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Controller that handles authentication-related endpoints.\nThis controller exposes routes for user authentication, such as login and status checks.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n/**\n * Controller that handles authentication-related endpoints.\n *\n * This controller exposes routes for user authentication, such as login and status checks.\n */\n@Controller('auth')\nexport class AuthController {\n  /**\n   * @param authService The injected `AuthService` used for handling the authentication logic.\n   */\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for authentication-related operations.\nThis service handles operations such as logging in and checking authentication status.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            The forwardRef and Inject decorators are used to resolve circular dependency issues between AuthService and UsersService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The injected UsersService which is used to interact with the user data.\nThe forwardRef and Inject decorators are used to resolve circular dependency issues between AuthService and UsersService.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Simulates checking if a user is authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean indicating whether the user is authenticated. (Currently always returns true, will be updated with actual logic).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Simulates a login process and generates a token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User's email address.\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User's password.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                A token (for now, it returns a placeholder string).\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * Service responsible for authentication-related operations.\n *\n * This service handles operations such as logging in and checking authentication status.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * @param userService The injected `UsersService` which is used to interact with the user data.\n   * The `forwardRef` and `Inject` decorators are used to resolve circular dependency issues between `AuthService` and `UsersService`.\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly userService: UsersService,\n  ) {}\n\n  /**\n   * Simulates a login process and generates a token.\n   *\n   * @param email User's email address.\n   * @param password User's password.\n   * @returns A token (for now, it returns a placeholder string).\n   */\n  public login(email: string, password: string) {\n    // const user = this.userService.findOneById('1234');\n    // return 'token';\n  }\n\n  /**\n   * Simulates checking if a user is authenticated.\n   *\n   * @returns A boolean indicating whether the user is authenticated. (Currently always returns true, will be updated with actual logic).\n   */\n  public isAuth() {\n    return true; // this will be replaced with actual logic to check authentication\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, description: 'Creates many users ', items: undefined})@IsArray()@IsNotEmpty()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    description: 'Creates many users ',\n    items: {\n      type: 'User',\n    },\n  })\n  @IsArray()\n  @IsNotEmpty()\n  @ValidateNested({ each: true })\n  @Type(() => CreateUserDto) // Transform the nested object to User class\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dots/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for creating a new blog post.\nThis class defines the structure and validation rules for the data\nrequired to create a new blog post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:199\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the blog post', example: 'This is the content of my first post.'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:105\n                        \n                    \n\n            \n                \n                    The content of the blog post (optional).\n\nMust be a string if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the featured image url of the blog post', example: 'https://example.com/featured-image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:133\n                        \n                    \n\n            \n                \n                    The featured image URL of the blog post (optional).\n\nMust be a valid URL if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:190\n                        \n                    \n\n            \n                \n                    Metadata options for the blog post (optional).\n\nMust be an array of objects, each with key and value properties.\nEach object is validated against the CreatePostMetaOptionsDto class.\n\nExample :  { key: 'option1', value: 'value1' },\n  { key: 'option2', value: 'value2' },\n  { key: 'option3', value: 'value3' }\n]\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'it can be post, story, page, series'})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:57\n                        \n                    \n\n            \n                \n                    The type of the post.\n\nMust be one of the enum values: post, story, page, or series.\nCannot be empty.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:146\n                        \n                    \n\n            \n                \n                    The ISO8601 date when the blog post was published (optional).\n\nMust be a valid ISO8601 date string if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the schema of the blog post', example: '{\n \"@context\": \"https:V/schema.org\", \n \"@type\": \"Person\"\n }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:119\n                        \n                    \n\n            \n                \n                    The schema of the blog post (optional).\n\nMust be valid JSON if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the slug of the blog post', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.'})@MaxLength(256)@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:78\n                        \n                    \n\n            \n                \n                    The slug of the blog post.\n\nMust be a string.\nCannot be empty.\nMust match the specified regex for valid slugs.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Status, description: 'draft, schedule, review, published'})@IsEnum(Status)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:92\n                        \n                    \n\n            \n                \n                    The status of the blog post.\n\nMust be one of the enum values: draft, schedule, review, or published.\nCannot be empty.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags tags passed', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:161\n                        \n                    \n\n            \n                \n                    Tags for the blog post (optional).\n\nMust be an array of strings if provided.\nEach string must have a minimum length of 3 characters.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the title of the blog post', example: 'My First Post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/create-post.dto.ts:43\n                        \n                    \n\n            \n                \n                    The title of the blog post.\n\nMust be a string.\nCannot be empty.\nMust have a minimum length of 4 characters.\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport {\n  IsArray,\n  //   IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/postType.enum';\nimport { Status } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-metaoptions.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n/**\n * DTO (Data Transfer Object) for creating a new blog post.\n * This class defines the structure and validation rules for the data\n * required to create a new blog post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the blog post.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must have a minimum length of 4 characters.\n   * @example 'My First Post'\n   */\n  @ApiProperty({\n    description: 'This is the title of the blog post',\n    example: 'My First Post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(512)\n  title: string;\n\n  /**\n   * The type of the post.\n   * - Must be one of the enum values: `post`, `story`, `page`, or `series`.\n   * - Cannot be empty.\n   * @example 'post'\n   */\n  @ApiProperty({\n    enum: PostType,\n    description: 'it can be post, story, page, series',\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  /**\n   * The slug of the blog post.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must match the specified regex for valid slugs.\n   * @example 'my-first-post'\n   */\n  @ApiProperty({\n    description: 'This is the slug of the blog post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.',\n  })\n  @MaxLength(256)\n  @MinLength(3)\n  slug: string;\n\n  /**\n   * The status of the blog post.\n   * - Must be one of the enum values: `draft`, `schedule`, `review`, or `published`.\n   * - Cannot be empty.\n   * @example 'draft'\n   */\n  @ApiProperty({\n    enum: Status,\n    description: 'draft, schedule, review, published',\n  })\n  @IsEnum(Status)\n  @IsNotEmpty()\n  status: Status;\n\n  /**\n   * The content of the blog post (optional).\n   * - Must be a string if provided.\n   * @example 'This is the content of my first post.'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the content of the blog post',\n    example: 'This is the content of my first post.',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * The schema of the blog post (optional).\n   * - Must be valid JSON if provided.\n   * @example '{ \"@context\": \"https://schema.org\", \"@type\": \"Person\" }'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the schema of the blog post',\n    example:\n      '{\\r\\n \"@context\": \"https:V\\/schema.org\", \\r\\n \"@type\": \"Person\"\\r\\n }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * The featured image URL of the blog post (optional).\n   * - Must be a valid URL if provided.\n   * @example 'https://example.com/featured-image.jpg'\n   */\n  @ApiPropertyOptional({\n    description: 'This is the featured image url of the blog post',\n    example: 'https://example.com/featured-image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  /**\n   * The ISO8601 date when the blog post was published (optional).\n   * - Must be a valid ISO8601 date string if provided.\n   * @example '2022-01-01T12:00:00Z'\n   */\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn?: Date | string;\n\n  /**\n   * Tags for the blog post (optional).\n   * - Must be an array of strings if provided.\n   * - Each string must have a minimum length of 3 characters.\n   * @example ['tag1', 'tag2', 'tag3']\n   */\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags tags passed',\n    example: [1, 2, 3, 4, 5],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  /**\n   * Metadata options for the blog post (optional).\n   * - Must be an array of objects, each with `key` and `value` properties.\n   * - Each object is validated against the `CreatePostMetaOptionsDto` class.\n   * @example [\n   *   { key: 'option1', value: 'value1' },\n   *   { key: 'option2', value: 'value2' },\n   *   { key: 'option3', value: 'value3' }\n   * ]\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'This is type of json string',\n          example: '{\"sidebarEnabled\" : true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true }) // each value of the array is included for validaiotn\n  @Type(() => CreatePostMetaOptionsDto) // use class-transformer to transform the object to CreatePostMetaOptionsDtor for validaiton\n  metaOptions?: CreatePostMetaOptionsDto | null; // Array of objects with key-value pairs\n\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-metaoptions.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for defining meta options of a blog post.\nThis class is used to validate the structure and values of each meta option object.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-metaoptions.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n/**\n * DTO (Data Transfer Object) for defining meta options of a blog post.\n * This class is used to validate the structure and values of each meta option object.\n */\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagsDto.html":{"url":"classes/CreateTagsDto.html","title":"class - CreateTagsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tags.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the slug of the blog post', example: 'my-first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.'})@MaxLength(256)@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagsDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  @ApiProperty({\n    description: 'This is the slug of the blog post',\n    example: 'my-first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug should only contain lowercase alphanumeric characters and hyphens, and must not start or end with a hyphen.',\n  })\n  @MaxLength(256)\n  @MinLength(3)\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO (Data Transfer Object) for creating a new user.\nThis class validates the structure and properties of a user creation request.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:50\n                        \n                    \n\n            \n                \n                    The email address of the user.\n\nMust be a valid email format.\nCannot be empty.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n            \n                \n                    The first name of the user.\n\nMust be a string.\nCannot be empty.\nMust be between 3 and 50 characters.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:39\n                        \n                    \n\n            \n                \n                    The last name of the user.\n\nMust be a string.\nOptional field.\nMust not exceed 50 characters if provided.\n\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@MaxLength(96)@Matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Minimum 8 chars at least one letter, number and special characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:75\n                        \n                    \n\n            \n                \n                    The password for the user account.\n\nMust be a string.\nCannot be empty.\nMust be at least 8 characters long.\nMust include:\nAt least one uppercase letter.\nAt least one lowercase letter.\nAt least one digit.\nAt least one special character (@$!%*?&).\n\n\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * DTO (Data Transfer Object) for creating a new user.\n * This class validates the structure and properties of a user creation request.\n */\nexport class CreateUserDto {\n  /**\n   * The first name of the user.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must be between 3 and 50 characters.\n   * @example 'John'\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * The last name of the user.\n   * - Must be a string.\n   * - Optional field.\n   * - Must not exceed 50 characters if provided.\n   * @example 'Doe'\n   */\n  @IsString()\n  @IsOptional()\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * The email address of the user.\n   * - Must be a valid email format.\n   * - Cannot be empty.\n   * @example 'john.doe@example.com'\n   */\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  /**\n   * The password for the user account.\n   * - Must be a string.\n   * - Cannot be empty.\n   * - Must be at least 8 characters long.\n   * - Must include:\n   *   - At least one uppercase letter.\n   *   - At least one lowercase letter.\n   *   - At least one digit.\n   *   - At least one special character (@$!%*?&).\n   * @example 'P@ssw0rd123!'\n   */\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @MaxLength(96)\n  @Matches(\n    /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    {\n      message:\n        'Minimum 8 chars at least one letter, number and special characters',\n    },\n  )\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostsBaseDto.html":{"url":"classes/GetPostsBaseDto.html","title":"class - GetPostsBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostsBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dots/get-posts.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/get-posts.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/get-posts.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { paginationQueryDto } from 'src/common/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class getPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  paginationQueryDto,\n) {\n  //this will conbine both dtos\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for fetching user parameters.\n\nUsed to specify optional parameters when retrieving user data.\nSupports Swagger documentation and validation.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with specific id', example: 1})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:26\n                        \n                    \n\n            \n                \n                    Optional user ID for fetching a specific user.\n\nIf provided, the API will return data for the user with the given ID.\nDecorated with validation rules to ensure it's an integer.\n\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\n/**\n * Data Transfer Object for fetching user parameters.\n * - Used to specify optional parameters when retrieving user data.\n * - Supports Swagger documentation and validation.\n */\nexport class GetUsersParamDto {\n  /**\n   * Optional user ID for fetching a specific user.\n   * - If provided, the API will return data for the user with the given ID.\n   * - Decorated with validation rules to ensure it's an integer.\n   *\n   * @example 1\n   * @description Get user with a specific ID.\n   */\n  @ApiPropertyOptional({\n    description: 'Get user with specific id',\n    example: 1,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, { onDelete: 'CASCADE' }) // we are passing where the bidirectional relationship to post metaOptions [must define this to other side also]\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                    Async\n                                createPostMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Async\n                        createPostMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPostMetaOptions(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { MetaOptionsService } from './providers/meta-option.service';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-metaoptions.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  @Post()\n  public async createPostMetaOptions(\n    @Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    return this.metaOptionsService.createPostMetaOptions(\n      createPostMetaOptionsDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-option.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionsService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  exports: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-option.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPostMetaOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-option.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPostMetaOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPostMetaOptions(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-option.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-metaoptions.dto';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metaOptionsRepository: Repository,\n  ) {}\n  public createPostMetaOptions(\n    createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ) {\n    const metaOption = this.metaOptionsRepository.create(\n      createPostMetaOptionsDto,\n    );\n    return this.metaOptionsRepository.save(metaOption); // Saving the created meta option to the database.\n    // Implementation for creating post meta options\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[]; //this will create this data of type t means where this created any of the entities\n  meta: {\n    itemsPerPage: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    next: string;\n    prev: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PaginationModule_exports\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination.provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n  imports: [],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginationQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination.provider.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginationQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginationQuery(paginationQuery: paginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination.provider.ts:17\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            paginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { paginationQueryDto } from '../dto/pagination-query.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  constructor(\n    /**\n     * Injecting request\n     */\n    @Inject(REQUEST)\n    private request: Request,\n  ) {}\n  public async paginationQuery(\n    paginationQuery: paginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const results = await repository.find({\n      relations: {\n        // metaOptions: true,\n        // author: true,\n        // tags: true,\n      }, //if we just want to get it for post then define relations or if want to make it globally do eager:true under cascade:true in dto\n      skip: (paginationQuery.page - 1) * paginationQuery.limit, //skip number of values\n      take: paginationQuery.limit,\n    });\n\n    /**\n     * Create url for pagination\n     */\n    const baseUrl =\n      this.request.protocol + '://' + this.request.headers.host + '/';\n\n    const newUrl = new URL(this.request.url, baseUrl);\n\n    /**\n     * cacluating the page numbers\n     */\n\n    const totalItems = await repository.count(); //totla number of items\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery == totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const prevPage =\n      paginationQuery.page == 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const finalRes: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPage: paginationQuery.limit,\n        totalItems: totalPages,\n        currentPage: paginationQuery.page,\n        totalPages: totalPages,\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}page=${totalPages}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}page=${nextPage}`,\n        prev: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}page=${prevPage}`,\n      },\n    };\n    return finalRes;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dots/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Dto for patch post input data mapping type of the create post dto\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the blog post to update'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dots/patch-post.dto.ts:17\n                        \n                    \n\n            \n                \n                    Id of the post for updating the post\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\n/**\n * Dto for patch post input data mapping type of the create post dto\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  /**\n   * Id of the post for updating the post\n   */\n  @ApiProperty({\n    description: 'The id of the blog post to update',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for patching/updating user data.\nThis class extends PartialType(CreateUserDto) to inherit all properties from CreateUserDto,\nbut makes all properties optional. This is useful for handling partial updates where not all fields need to be provided.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\n/**\n * DTO for patching/updating user data.\n *\n * This class extends `PartialType(CreateUserDto)` to inherit all properties from `CreateUserDto`,\n * but makes all properties optional. This is useful for handling partial updates where not all fields need to be provided.\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  // the partial type is a mapped type which helps this dto to get the all properties of CreateUserDto\n  // yet it makes all the properties of CreateUserDto optional\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, author => author.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaoptions => metaoptions.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Status, default: undefined, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { PostType } from './enums/postType.enum';\nimport { Status } from './enums/postStatus.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    default: PostType.POST,\n    nullable: false,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: Status,\n    default: Status.DRAFT,\n    nullable: false,\n  })\n  status: Status;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishedOn?: Date;\n\n  // @OneToOne(() => MetaOption, { cascade: ['insert', 'update'] }) //cascade for specific actions\n  @OneToOne(() => MetaOption, (metaoptions) => metaoptions.post, {\n    cascade: true,\n    eager: true,\n  }) //cascade for all actions\n  /* @JoinColumn() */\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (author) => author.posts, { eager: true })\n  author: User;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                Post controller for managin posts business operations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: 201, description: 'Your post has been created successfully', type: CreatePostDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        This is for creating post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                createPostDto\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string, postQuery: getPostsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Method to get posts of a speciif user or randomly all\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            getPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'Your post has been updated successfully', type: PatchPostDto})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:72\n                        \n                    \n\n\n            \n                \n                        update a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dots/create-post.dto';\nimport { PatchPostDto } from './dots/patch-post.dto';\nimport { getPostsDto } from './dots/get-posts.dto';\n/**\n * Post controller for managin posts business operations\n * @controller\n */\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  /**\n   * Constructor\n   * @param postsService\n   */\n  constructor(private readonly postsService: PostsService) {}\n  /**\n   * Method to get posts of a speciif user or randomly all\n   */\n  @Get('/:userId?')\n  public getPosts(\n    @Param('userId') userId: string,\n    @Query() postQuery: getPostsDto,\n  ) {\n    return this.postsService.findAll(userId, postQuery);\n  }\n\n  /**\n   * This is for creating post\n   * @param createPostDto\n   * @returns createPostDto\n   */\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Your post has been created successfully',\n    type: CreatePostDto,\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n    return this.postsService.createPost(createPostDto);\n  }\n\n  /**\n   * update a post\n   * @param patchPostDto\n   */\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Your post has been updated successfully',\n    type: PatchPostDto,\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.updatePost(patchPostDto);\n  }\n\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.deletePost(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOptionsModule->PostsModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOptionsModule } from 'src/meta-options/meta-options.module';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n    MetaOptionsModule,\n    PaginationModule,\n  ], //we can only import modules but the things imported with the modules are explicitly exported by the module\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for managing posts.\n\nProvides methods for retrieving and creating posts.\nUses dependency injection to interact with the UsersService.\n\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postsRepository: Repository, metaOptionsRepository: Repository, tagService: TagsService, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:27\n                            \n                        \n\n                \n                    \n                            Constructor for PostsService.\n\nInjects the UsersService to allow interaction with user data.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService for handling user-related operations.\n\n\n                                                        \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Creates a new post.\n\nSimulates the creation of a post.\n\nExample :createPost(); // \"Post created successfully\"\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                A success message indicating the post was created.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(postId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:168\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                postId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string, postQuery: getPostsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a given user.\n\nFetches user data using the UsersService.\nConstructs a list of posts associated with the user.\n\nExample :findAll('12345');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user for whom posts are to be fetched.\n\n\n                                            \n                                        \n                                        \n                                                postQuery\n                                            \n                                                            getPostsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                An array of posts, each containing the user, title, and content.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { Post } from '../post.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostDto } from '../dots/create-post.dto';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dots/patch-post.dto';\nimport { getPostsDto } from '../dots/get-posts.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination.provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\n\n/**\n * Service responsible for managing posts.\n * - Provides methods for retrieving and creating posts.\n * - Uses dependency injection to interact with the `UsersService`.\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * Constructor for `PostsService`.\n   * - Injects the `UsersService` to allow interaction with user data.\n   * @param usersService - Service for handling user-related operations.\n   */\n  constructor(\n    private readonly usersService: UsersService, // dependency injection is used to inject services into controllers and other components.\n    @InjectRepository(Post)\n    private postsRepository: Repository, // Corrected the typo here\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository, // Corrected the typo here\n    private readonly tagService: TagsService,\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  /**\n   * Retrieves all posts for a given user.\n   * - Fetches user data using the `UsersService`.\n   * - Constructs a list of posts associated with the user.\n   * @param userId - The ID of the user for whom posts are to be fetched.\n   * @returns An array of posts, each containing the user, title, and content.\n   * @example\n   * findAll('12345');\n   */\n  public async findAll(\n    userId: string,\n    postQuery: getPostsDto,\n  ): Promise> {\n    // user service\n    const posts = await this.paginationProvider.paginationQuery(\n      {\n        limit: postQuery.limit,\n        page: postQuery.page,\n      },\n      this.postsRepository,\n    ); //relations also all the defined options\n\n    return posts;\n  }\n\n  /**\n   * Creates a new post.\n   * - Simulates the creation of a post.\n   * @returns A success message indicating the post was created.\n   * @example\n   * createPost(); // \"Post created successfully\"\n   */\n  public async createPost(@Body() createPostDto: CreatePostDto) {\n    // create metaoptions\n    // removing meta options creation because of cascade\n    // const metaOptions = createPostDto.metaOptions\n    //   ? this.metaOptionsRepository.create(createPostDto.metaOptions)\n    //   : null;\n\n    // if (metaOptions) {\n    //   await this.metaOptionsRepository.save(metaOptions);\n    // }\n\n    // create post\n    // find the post\n    let post = undefined;\n    try {\n      post = await this.postsRepository.findOneBy({ slug: createPostDto.slug });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error communicating with the database',\n          cause: error,\n        },\n      );\n    }\n\n    if (post) {\n      throw new BadRequestException('Post already Exists', {\n        description: 'Post already exist try again with a different slug',\n      });\n    }\n\n    //find author using author id\n    let author = undefined;\n    try {\n      author = await this.usersService.findOneById(createPostDto.authorId);\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Unable to process your request');\n    }\n\n    if (!author) {\n      throw new HttpException(\n        {\n          status: HttpStatus.NOT_FOUND,\n          error: 'User not found',\n          fileName: 'posts.service.ts',\n          lineNumber: 91,\n        },\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    // create tags\n    let tags = undefined;\n    try {\n      tags = await this.tagService.findMultipleTags(createPostDto.tags);\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException(\n        'Unable to process your request. Please try again later',\n        {\n          description: 'Unable to process your request. Please try again later',\n        },\n      );\n    }\n\n    if (tags.length !== createPostDto.tags.length) {\n      throw new BadRequestException('Please check the tags id you have sent');\n    }\n\n    // create post\n    post = this.postsRepository.create({\n      ...createPostDto,\n      author: author,\n      tags: tags,\n    }); //assigning the author we found using create post dto\n    // add metaoptions to the post\n    // if (metaOptions) {\n    //   post.metaOptions = metaOptions;\n    // }\n\n    // return posts to the user\n    try {\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Unable to process your request', {\n        description: 'Please try again later',\n      });\n    }\n  }\n\n  public async deletePost(postId: number) {\n    // find the post\n    // const post = await this.postsRepository.findOneBy({ id: postId });\n    // BiDirectional one to one relationship\n    // const inversePost = await this.metaOptionsRepository.find({\n    //   where: { id: post.metaOptions.id },\n    //   relations: {\n    //     post: true,\n    //   },\n    // }); // finding metaoptions first using the post and post using the metaoptions\n    // console.log(inversePost);\n    // uni-directional one to one relationship\n    // deleting post because meta option are the foreign key\n    // await this.postsRepository.delete(postId);\n    //delete meta optionsfrom the\n    // await this.metaOptionsRepository.delete(post.metaOptions.id);\n\n    // delete using cascade\n    await this.postsRepository.delete(postId); //this will delete the metaoptions also\n    // confirmation\n    return { deleted: true, id: postId };\n  }\n\n  public async updatePost(patchPostDto: PatchPostDto) {\n    let tags = undefined;\n    let post = undefined;\n    try {\n      // find the tags\n      tags = await this.tagService.findMultipleTags(patchPostDto.tags);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error communicating with the database',\n          cause: error,\n        },\n      );\n    }\n\n    if (!tags || tags.length !== patchPostDto.tags.length) {\n      throw new BadRequestException('Please check the tags id you have sent');\n    }\n    // find the post\n    try {\n      post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error communicating with the database',\n          cause: error,\n        },\n      );\n    }\n\n    if (!post) {\n      throw new HttpException(\n        {\n          status: HttpStatus.NOT_FOUND,\n          error: 'The post not found',\n          fileName: 'posts.service.ts',\n          lineNumber: 150,\n        },\n        HttpStatus.NOT_FOUND,\n        {\n          cause: console.log('The post not found in the database'),\n        },\n      );\n    }\n    // update the properties of the post\n    post.title = patchPostDto.title ?? post.title; //if post is sent then update otherwise use the existing one\n    post.postType = patchPostDto.postType ?? post.postType;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.status = patchPostDto.status ?? post.status;\n    post.content = patchPostDto.content ?? post.content;\n    post.schema = patchPostDto.schema ?? post.schema;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishedOn = patchPostDto.publishedOn ?? post.publishedOn;\n\n    // assign the new tags\n    post.tags = tags;\n\n    // save the updated post and return it\n    try {\n      return await this.postsRepository.save(post);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Error communicating with the database',\n          cause: error,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, posts => posts.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, unique: true, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:59\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n    nullable: false,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    unique: true,\n    nullable: false,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (posts) => posts.tags, { onDelete: 'CASCADE' })\n  posts: Post[];\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn() //this decorator set entire entity [table] allows to soft delete things\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createTag\n                            \n                            \n                                    \n                                    Public\n                                deleteTags\n                            \n                            \n                                    \n                                    Public\n                                softDeleteTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagsDto: CreateTagsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create an tag for a post'})@ApiResponse({status: 200, description: 'Your tag has been created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagsDto\n                                            \n                                                            CreateTagsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTags(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        softDeleteTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTags(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateTagsDto } from './dtos/create-tags.dto';\nimport { TagsService } from './providers/tags.service';\n\n@Controller('tags')\n@ApiTags('Tags')\nexport class TagsController {\n  constructor(private readonly tagsService: TagsService) {}\n  @ApiOperation({\n    summary: 'Create an tag for a post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Your tag has been created successfully',\n  })\n  @Post()\n  public createTag(@Body() createTagsDto: CreateTagsDto) {\n    return this.tagsService.createTags(createTagsDto);\n  }\n\n  @Delete()\n  public deleteTags(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.deleteTags(id);\n  }\n\n  // /tags/soft-delete\n  @Delete('soft-delete')\n  public softDeleteTags(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TagsService } from './providers/tags.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService],\n  exports: [TagsService],\n  imports: [TypeOrmModule.forFeature([Tag])],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TagsService.html":{"url":"classes/TagsService.html","title":"class - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTags\n                            \n                            \n                                    Public\n                                    Async\n                                deleteTags\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTags(createTagsDto: CreateTagsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagsDto\n                                            \n                                                            CreateTagsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTags(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreateTagsDto } from '../dtos/create-tags.dto';\nimport { Body } from '@nestjs/common';\n\nexport class TagsService {\n  constructor(\n    @InjectRepository(Tag)\n    private tagRepository: Repository,\n  ) {}\n\n  public async createTags(@Body() createTagsDto: CreateTagsDto) {\n    const tag = this.tagRepository.create(createTagsDto);\n\n    return await this.tagRepository.save(tag);\n  }\n\n  public async findMultipleTags(tags: number[]) {\n    return await this.tagRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n  }\n\n  public async deleteTags(id: number) {\n    await this.tagRepository.delete(id);\n\n    return {\n      deleted: true,\n      id,\n    };\n  }\n\n  public async softDelete(id: number) {\n    await this.tagRepository.softDelete(id);\n    return {\n      soft_deleted: true,\n      id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => undefined.id)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  //   @PrimaryColumn() //don't generate id automatically\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (post) => post.author.id)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing user-related operations.\n\nHandles incoming HTTP requests for user data.\nImplements routes for retrieving, creating, and updating users.\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        POST /users - Creates a new user.\n\nAccepts user data via CreateUserDto.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object for creating a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Confirmation message.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('create-many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:144\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Fetches the users'})@ApiResponse({status: 200, description: 'User fetched succesfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'Limit the number of results', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'Number of current page', example: 1})@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:89\n                        \n                    \n\n\n            \n                \n                        GET /users/:id? - Fetches users with optional ID and query parameters.\n\nSupports pagination using limit and page query parameters.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nOptional DTO for user ID parameter.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nLimit the number of results (default: 10).\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrent page number (default: 1).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                List of users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:139\n                        \n                    \n\n\n            \n                \n                        PATCH /users - Updates an existing user.\n\nAccepts partial user data via PatchUserDto.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData Transfer Object for patching a user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                Updated user data.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  // Headers,\n  // Ip,\n  Param,\n  Post,\n  Query,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n  // ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n// import { Req } from '@nestjs/common';\n// import {Request} from 'express';\n\n/**\n * Controller for managing user-related operations.\n * - Handles incoming HTTP requests for user data.\n * - Implements routes for retrieving, creating, and updating users.\n */\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * Dependency Injection of UsersService.\n   * @param usersService - Provides methods to interact with user data.\n   */\n  constructor(\n    //injecting userService dependency\n    private readonly usersService: UsersService,\n  ) {}\n\n  // Approach 1 to get the params\n  //   @Get('/:id') ///:id?->will make it not required // this is the decorator for handling GET requests\n  //   public getUsers(@Param() params: any, @Query() query: any) {\n  //     console.log(params);\n  //     console.log(query);\n  //     return 'You have sent a get request to users endpoint';\n  //   }\n\n  //   @Get('/:id/:optional?')\n  //   public getUsers(@Param('id') id: any, @Query('limit') limit: any) {\n  //     console.log(id);\n  //     console.log(limit);\n  //     return 'You have sent a get request to users endpoint';\n  //   }\n\n  //used pipe\n\n  /**\n   * GET /users/:id? - Fetches users with optional ID and query parameters.\n   * - Supports pagination using `limit` and `page` query parameters.\n   *\n   * @param getUsersParamDto - Optional DTO for user ID parameter.\n   * @param limit - Limit the number of results (default: 10).\n   * @param page - Current page number (default: 1).\n   * @returns List of users.\n   */\n  @ApiOperation({\n    summary: 'Fetches the users',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User fetched succesfully',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'Limit the number of results',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'Number of current page',\n    example: 1,\n  })\n  @Get()\n  public getUsers(\n    // commented because we can't use dto with single key extracted\n    // @Param('id', ParseIntPipe) id: number | undefined,\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(); //getUsersParamDto, ///limit, // page\n\n    // console.log(getUsersParamDto);\n    // console.log(limit);\n    // console.log(page);\n  }\n\n  /**\n   * POST /users - Creates a new user.\n   * - Accepts user data via `CreateUserDto`.\n   *\n   * @param createUserDto - Data Transfer Object for creating a user.\n   * @returns Confirmation message.\n   */\n  @Post() // this is the decorator handling POST requests\n  public createUser(\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto, //here we can use our dto class to\n    @Body() createUserDto: CreateUserDto, //here we can use our dto class to without using validaiton PIPE because imported into the main.ts\n    // @Headers() headers: any,\n    // @Ip() ip: any,\n  ) {\n    return this.usersService.createUser(createUserDto);\n    // console.log(headers);\n    // console.log(ip);\n    // return 'You have sent a post request to users endpoint';\n  }\n\n  // in below way we can use the express request object to get the body params but its not good way until its necessary\n  // @Post() // this is the decorator handling POST requests\n  // public createUser(@Req() request: Request) {\n  // console.log(request);\n  // return 'You have sent a post request to users endpoint';\n  // }\n\n  // started with the patch request\n  /**\n   * PATCH /users - Updates an existing user.\n   * - Accepts partial user data via `PatchUserDto`.\n   *\n   * @param patchUserDto - Data Transfer Object for patching a user.\n   * @returns Updated user data.\n   */\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n\n  @Post('create-many') // this is the decorator handling POST requests\n  public createUsers(\n    // @Body(new ValidationPipe()) createUserDto: CreateUserDto, //here we can use our dto class to\n    @Body() createManyUsersDto: CreateManyUsersDto, //here we can use our dto class to without using validaiton PIPE because imported into the main.ts\n    // @Headers() headers: any,\n    // @Ip() ip: any,\n  ) {\n    return this.usersService.createManyUsers(createManyUsersDto);\n    // console.log(headers);\n    // console.log(ip);\n    // return 'You have sent a post request to users endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersCreateManyProvider.html":{"url":"injectables/UsersCreateManyProvider.html","title":"injectable - UsersCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users-create-many.provider.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users-create-many.provider.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class UsersCreateManyProvider {\n  constructor(private readonly dataSource: DataSource) {}\n  public async createManyUsers(createManyUsersDto: CreateManyUsersDto) {\n    const newUsers: User[] = [];\n    //need a query runner instance\n    const queryRunner = this.dataSource.createQueryRunner();\n    try {\n      //connect instance with our data source\n      await queryRunner.connect();\n      //start the transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      console.log(error);\n      throw new RequestTimeoutException('Could not connect to database');\n    }\n    //operations\n    try {\n      for (const user of createManyUsersDto.users) {\n        const newUser = await queryRunner.manager.create(User, user);\n        const result = await queryRunner.manager.save(newUser);\n        newUsers.push(result);\n      }\n      //if successfull commit it\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      //if unsuccessfull rollback it\n\n      console.log(error);\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('Could not complete the transaction.', {\n        description: String(error),\n      });\n    } finally {\n      //release the connection\n      try {\n        await queryRunner.release();\n      } catch (e) {\n        throw new RequestTimeoutException('Could not release connection', {\n          description: String(e),\n        });\n      }\n      return newUsers;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersCreateManyProvider\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersCreateManyProvider } from './providers/users-create-many.provider';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService, UsersCreateManyProvider],\n  exports: [UsersService],\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n// providers are only available to export\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createManyUsers\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>, dataSource: DataSource, usersCreateManyProvider: UsersCreateManyProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor for the user service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersCreateManyProvider\n                                                  \n                                                        \n                                                                        UsersCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(createManyUsersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createManyUsersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Method for creating a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:91\n                        \n                    \n\n\n            \n                \n                         This method is for call the all users from the database\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Find a single user using id from the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                object {}\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\n// import { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { DataSource, Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UsersCreateManyProvider } from './users-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n/**\n * Class to connect users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the user service\n   * @param authService\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private usersRepository: Repository, // Corrected the typo here\n\n    @Inject(profileConfig.KEY) //need to remember this KEY word\n    private readonly profileConfiguration: ConfigType,\n\n    private readonly dataSource: DataSource,\n\n    private readonly usersCreateManyProvider: UsersCreateManyProvider,\n  ) {}\n\n  /**\n   * Method for creating a new user\n   */\n  public async createUser(createUserDto: CreateUserDto) {\n    let existingUser = undefined;\n    try {\n      // check if the user already exists email\n      existingUser = await this.usersRepository.findOne({\n        where: {\n          email: createUserDto.email,\n        },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'error connecting to the db',\n          cause: error,\n        },\n      );\n    }\n\n    // handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user is already exist please check your email',\n      );\n    }\n    //create a new user\n    let newUser = this.usersRepository.create(createUserDto);\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'error saving user to the db',\n          cause: error,\n        },\n      );\n    }\n    return newUser;\n  }\n\n  /**\n   *  This method is for call the all users from the database\n   */\n  public findAll() {\n    // page: number, // limit: number, // getUsersParamDto: GetUsersParamDto,\n    throw new HttpException(\n      {\n        status: HttpStatus.MOVED_PERMANENTLY,\n        error: 'The Api Endpoint does not exist',\n        fileName: 'user.service.ts', //use with caution\n        lineNumber: 90,\n      },\n      HttpStatus.MOVED_PERMANENTLY,\n      {\n        //for loggin the exception this is not being sent to the user\n        cause: new Error(),\n        description: 'The Api end point is not working properly',\n      },\n    );\n  }\n\n  /**\n   * Find a single user using id from the database\n   * @param id\n   * @returns object {}\n   */\n  public async findOneById(id: number) {\n    let user = undefined;\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (err) {\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'error connecting to the db',\n          cause: err,\n        },\n      );\n    }\n\n    if (!user) {\n      throw new BadRequestException('User not found with given id');\n    }\n    return user;\n  }\n\n  public async createManyUsers(createManyUsersDto: CreateManyUsersDto) {\n    return await this.usersCreateManyProvider.createManyUsers(\n      createManyUsersDto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/common/pagination/dto/pagination-query.dto.ts\n            \n            class\n            paginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-metaoptions.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-option.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dots/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/posts/dots/get-posts.dto.ts\n            \n            class\n            GetPostsBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dots/get-posts.dto.ts\n            \n            class\n            getPostsDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dots/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tags.dto.ts\n            \n            class\n            CreateTagsDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            class\n            TagsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/providers/users-create-many.provider.ts\n            \n            injectable\n            UsersCreateManyProvider\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.12.2\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                        \n                            Status   (src/.../postStatus.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Boostrap functino for the app\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/getPostsDto.html":{"url":"classes/getPostsDto.html","title":"class - getPostsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  getPostsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dots/get-posts.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostsBaseDto,\n  paginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { paginationQueryDto } from 'src/common/pagination/dto/pagination-query.dto';\n\nclass GetPostsBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class getPostsDto extends IntersectionType(\n  GetPostsBaseDto,\n  paginationQueryDto,\n) {\n  //this will conbine both dtos\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_exports\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nMetaOptionsModule->PostsModule\n\n\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nMetaOptionsService \n\nMetaOptionsService \n\nMetaOptionsService  -->\n\nMetaOptionsModule->MetaOptionsService \n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersCreateManyProvider\n\nUsersCreateManyProvider\n\nUsersModule -->\n\nUsersCreateManyProvider->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/paginationQueryDto.html":{"url":"classes/paginationQueryDto.html","title":"class - paginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  paginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dto/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dto/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class paginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  limit?: number = 10; //default value is 10\n\n  @IsOptional()\n  @IsPositive()\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
